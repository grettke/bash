#+title: Bash Configuration Document

This document is my Bash configuration.

It is split into roughly two parts:
- Things that rarely change: fundamental Bash behavior and configuration options.
- Things that change frequently: Interactive daily use.

This document attempts to describe sections with titles explaining their intent clearly.

* Release Notes
:PROPERTIES:
:ID:       org_grant_2021-07-15T22-45-59-05-00_Sadie:1E64BDF7-7E7A-4989-B0E1-7BDD15B01A89
:END:

When I wrote this document, Bash was at version 4.3. I slowly read the manual twice and then thoughtfully configured my system. Consequently, I've got a better perspective on the philosophy and culture of my configuration. From here, I will read about new features in each release and figure out if further configuration is required. The following are notes about each release since.

Note: To read the release notes, download a tar file of the source code [[http://git.savannah.gnu.org/cgit/bash.git/][here]] and read the NEWS file.

** Bash 4.4
:PROPERTIES:
:ID:       org_grant_2021-07-15T22-45-59-05-00_Sadie:D74647C0-5F32-461E-A6E0-F99A5C366500
:END:

- 1. New Features in Bash
- 1.y. Bash now checks $INSIDE_EMACS as well as $EMACS when deciding whether or not bash is being run in a GNU Emacs shell window.
- 1.jj. New prompt string: PS0.  Expanded and displayed by interactive shells after
- 1.nn. Shells running as root no longer inherit PS4 from the environment, closing a security hole involving PS4 expansion performing command substitution.
- 1.oo. If executing an implicit `cd' when the `autocd' option is set, bash will now invoke a function named `cd' if one exists before executing the `cd' builtin.
- 2. New Features in Readline
- 2.c. The editing mode indicators can now be strings and are user-settable (new `emacs-mode-string', `vi-cmd-mode-string' and `vi-ins-mode-string' variables). Mode strings can contain invisible character sequences. Setting mode strings to null strings restores the defaults.

- Changes to my configuration:
  - Added PS0. Surprisingly satisfying to use it.

- Notes
  - No impact

** Bash 5.0
:PROPERTIES:
:ID:       org_grant_2021-07-15T22-45-59-05-00_Sadie:BA5FA4D0-8736-455E-913B-417449E7934D
:END:

- 1. New Features in Bash
- 1a. The `wait' builtin can now wait for the last process substitution created.
- 1b. There is an EPOCHSECONDS variable, which expands to the time in seconds since the Unix epoch.
- 1.d. understands negative arguments: negative arguments offset from the end of the history list.
- 1.i. A nameref name resolution loop in a function now resolves to a variable by that name in the global scope.
- 1.m. If a non-interactive shell with job control enabled detects that a foreground job died due to SIGINT, it acts as if it received the SIGINT.
- 1.o. A new shopt option: localvar_inherit; if set, a local variable inherits the value of a variable with the same name at the nearest preceding scope.
- 1.t. The `history' builtin can now delete ranges of history entries using `-d start-end'.
- 1.v. The command completion code now matches aliases and shell function names case-insensitively if the readline completion-ignore-case variable is set.
- 1.y. The `umask' builtin now allows modes and masks greater than octal 777.
- 1.bb. Bash no longer allows variable assignments preceding a special builtin that changes variable attributes to propagate back to the calling environment unless the compatibility level is 44 or lower.
- 1.gg. The localvar_inherit option will not attempt to inherit a value from a variable of an incompatible type (indexed vs. associative arrays, for example).
- 1.kk. The `localvar_unset' shopt option is now visible and documented.
- 2. New Features in Readline
- 2.k. The "Insert" keypad key, if available, now puts readline into overwrite
   mode.

- Changes to my configuration:
  - completion-ignore-case
  - localvar_inherit
  - localvar_unset

- Notes
  - Inheritance and scope are a topic.
  - Case insensitive command completion.

** Bash 5.1
:PROPERTIES:
:ID:       org_grant_2021-07-15T22-45-59-05-00_Sadie:D5CB8583-5084-4A47-BB4B-0170FB544F18
:END:

- 1. New Features in Bash
- 1.i. SRANDOM: a new variable that expands to a 32-bit random number that is not produced by an LCRNG, and uses getrandom/getentropy, falling back to /dev/urandom or arc4random if available. There is a fallback generator if none of these are available.
- 1.m. If `unset' is executed without option arguments, bash tries to unset a shell function if a name argument cannot be a shell variable name because it's not an identifier.
- 1.y. `local' now honors the `-p' option to display all local variables at
  the current context.
- 1.bb. `declare' and `local' now have a -I option that inherits attributes and value from a variable with the same name at a previous scope.
- 1.hh. New `K' parameter transformation to display associative arrays as key-value pairs.
- 1.tt. The `fg' and `bg' builtins now return an error in a command substitution when asked to restart a job inherited from the parent shell.
- 2. New Features in Readline
- 2.c. Readline automatically switches to horizontal scrolling if the terminal has only one line.

- Changes to my configuration:
  - None.

- Note
  - No impact.

* Fundamental, Common, and Mostly Static Bash Behavior Configuration
:PROPERTIES:
:ID: org_gcr_2017-05-12_mara:A9BD0A2F-5066-4349-8DB3-20E58925B2E5
:END:

- Configure
  - Bash behavior and options here.
    - For both Interactive and Non-Interactive mode.
  - Everything else /not/ here.

This configuration has been thoroughly researched and carefully chosen.

It is unlikely to change too much because it is for the most fundamental aspects of Bash behavior and /not/ for day-to-day use.

If you are reading this, then something special is going on!

** Common Configuration for both Interactive and Non-Interactive Use
:PROPERTIES:
:header-args: :noweb-ref BashCore :comments no
:ID:       org_gcr_2017-05-12_mara:F5ED8B16-23A9-4FB2-88A8-A340984AF656
:END:

This configuration belongs in both the Interactive and Non-Interactive configuration.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_435FF2EC-213F-4D6A-94B9-613AD6F153DDS
#+BEGIN_SRC sh
function gcrbashcheck {
  local expected_major=5
  local expected_minor=1
  local actual_major="${BASH_VERSINFO[0]}"
  local actual_minor="${BASH_VERSINFO[1]}"
  printf "Using Bash %s\n" "$BASH_VERSION"
  if [[ $actual_major -gt $expected_major ]]; then
    return
  elif [[ $actual_major -eq $expected_major && $actual_minor -ge $expected_minor ]]; then
    return
  else
    printf "\e[31mFYI: Using Bash v%s.%s but expecting Bash >= v%s.%s\e[0m\n" "$actual_major" "$actual_minor" "$expected_major" "$expected_minor" 1>&2
  fi
}
gcrbashcheck
#+END_SRC

*** Options
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:17314013-60AE-48F8-BF54-CAF94D285E32
:END:
**** Expressivity
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:BAED844A-0444-40DE-9052-F5DCFD0BF1C9
:END:

Programmatically generate expressions (Brace Expansion) using
- Sequence of comma-separated names
- Pattern matching to create a list of names of files
- Sequence expression

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_E96DA766-2B22-430B-A38C-78E261051396
#+BEGIN_SRC sh
set -o braceexpand
#+END_SRC

Define key-pair values for the command's dynamic extent before calling the command and nowhere else. Doing otherwise breaks ~alias~ for example, surprisingly.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_66B9DD8E-B586-4738-84CC-28E8874A455D
#+BEGIN_SRC sh
set +o keyword
#+END_SRC

**** Fail Fast
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:EE650225-E984-4C7D-8D73-B027A50000BD
:END:

Exit immediately when a command in a pipeline fails. Assume the worst. If calling the failed command is not an emergency, then find the parameter for that command that prevents it from reporting a failure. Failing immediately looks like an extreme configuration decision, but it isn't. The behavior is disabled for the following expected situations where the command is

- Exceptions
  - in ~while~ or ~until~ block
  - is part of an ~if~ test
  - short-circuit evaluation
    - surprised at this behavior!
    - but for the last command
  - any command in a pipeline but the last
    - surprised at this behavior!
  - having its return status inverted by ~!~
- This seems strange; I read this as we won't get the desired behavior during a sequence of express, and that is the exact place where we want that behavior. Perform research on this.

When an error occurs, remain in the shell so that the system operator can research what happened in that context. Don't exit the shell because there was an error. Enabling this causes the shell to exit immediately.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_967CE969-FFC5-472B-AE89-239CE444DC3A
#+BEGIN_SRC sh
set +o errexit
#+END_SRC

The result of a pipeline is the result of the last expression to exit on error
or zero if they all completed successfully. In other words, it reads like a "short circuit" evaluation, but I'm not sure it is. TODO: Perform research on this.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_20398471-203E-4F93-8D03-0DBB02A274B8
#+BEGIN_SRC sh
set -o pipefail
#+END_SRC

When there are no file matches, found report an error.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_8B5E53E8-0EE3-4DF2-A3E9-41FCF1CCD2C7
#+BEGIN_SRC sh
shopt -s failglob
#+END_SRC

Report an error when you ~shift~ more parameters than you received.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_3E25F3E3-E0F6-4D80-A6DB-94C3303F3B4B
#+BEGIN_SRC sh
shopt -s shift_verbose
#+END_SRC

**** Inheritance
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:468DE01C-7493-4307-8CF2-1C736E06F38A
:END:

Every change (creation and modification) made to the parent shell environment (functions and variables) should *not* be automatically exported to every child shell environment because it isn't intuitive to virtually every Bash user.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_C1364853-3E34-472B-8004-BF3BC47EEE97
#+BEGIN_SRC sh
set +o allexport
#+END_SRC

Do the same thing for the ~ERR~ trap.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_1F299BFF-21E0-4D50-A713-17C9C8CADE62
#+BEGIN_SRC sh
set -o errtrace
#+END_SRC

Do the same thing for the ~DEBUG~ and ~RETURN~ traps.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_5648762E-59A3-41F3-8380-ADCBA7CA5460
#+BEGIN_SRC sh
set -o functrace
#+END_SRC

Pass non-directory arguments to =cd= and change to the value of that variable.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_5086373B-8721-4CDD-AA92-B75DA243C6E9
#+BEGIN_SRC sh
shopt -s cdable_vars
#+END_SRC

"If set, local variables inherit the value and attributes of a variable of the same name that exists at a previous scope before any new value is assigned. The nameref attribute is not inherited."

This is not a scoping feature. This is a convenience feature that is more like "define a variable name and then initialize it to the same global variable" at the same time. That is surprising so disable it.

#+NAME: org_grant_2021-07-15T22-45-59-05-00_Sadie_AE0D00C6-8FDF-4B40-9D65-1E23ED9F80E2
#+begin_src sh
shopt -u localvar_inherit
#+end_src

"If set, calling unset on local variables in previous function scopes marks them so subsequent lookups find them unset until that function returns. This is identical to the behavior of unsetting local variables at the current function scope."

Make the behavior consistent is good enough reason to enable it.

#+NAME: org_grant_2021-07-15T22-45-59-05-00_Sadie_912AD930-FA2B-4008-9A22-6CD54C5DE37D
#+begin_src sh
shopt -s localvar_unset
#+end_src

**** Job Control
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:7532ECDF-3E4A-4A4E-B522-6507E1636AB2
:END:

Enable it.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_AF2A0697-02F6-4E62-B57B-A115A7CD7B4B
#+BEGIN_SRC sh
set -o monitor
#+END_SRC

Immediately report terminated job status. This might appear to be an Interactive feature, but it isn't. It reports errors in the log file immediately realizing this Bash configuration "Fail Fast" goal.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_AA2CC1E2-A20D-4EEC-9E3D-7B27D5212ACD
#+BEGIN_SRC sh
set -o notify
#+END_SRC

**** No Surprises
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:A8FF6C86-EFD8-46E3-AB92-9D19ECB235A8
:END:

Provide but disable interactive debugging by default.

Instead, force children to change their configuration script,
run with ~bash --debugger~ or set ~shopt -s extdebug~.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_972F36A6-F2C2-4C2A-9026-F9F7E7AAEC06
#+BEGIN_SRC sh
shopt -u extdebug
#+END_SRC

Log files are only deemed critical after accidentally stomping on them. Make stomping visible by first deleting them and then writing them out again. Doing so is easy to automate and searchable.

#+BEGIN_QUOTE
Prevent output redirection using ‘>’, ‘>&’, and ‘<>’ from overwriting existing
files.
#+END_QUOTE

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_E5E5E938-D419-475F-9250-8EAEFD5E3CE6
#+BEGIN_SRC sh
set -o noclobber
#+END_SRC

Referencing an undefined variable or parameter should generate an error because the program can not run as intended. The system should fail-fast. Only use this in individual shell scripts, not the global configuration, because doing so prevents Bash system initialization by preventing you to define any new variables and dying!

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_A2FA681A-D61B-4E19-B3B2-E22DEE12949B
#+BEGIN_SRC sh
# set -o nounset
#+END_SRC

Store temporary files in one place.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_F66F1637-E3CB-4D66-BC8F-DE64C8F73901
#+BEGIN_SRC sh
export TMPDIR="/tmp"
#+END_SRC

**** Performance
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:AFB6A8B2-AFB2-4850-BF4D-87040E93222C
:END:

Cache recently executed command source locations in a lookup table and search that before searching the lookup path to find a command.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_44FDFC0D-611C-41FC-81B0-F67A01DBA87B
#+BEGIN_SRC sh
set -o hashall
shopt -s checkhash
#+END_SRC

*** Variables
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:9F0DDF78-01AB-4C68-9027-1852624E3851
:END:

**** Encoding
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:8DABD7BF-387E-4CCB-8242-AD3B3A8D0368
:END:

Use UTF-8 for everything.

Emacs will use this but will override it with settings in your init file.

Read more about how locale variables work on its man page. Only =LC_ALL= is required if all of your settings are the same.

Set anything un-set.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_4E46C65A-9282-4D52-91CE-E1739DEB4033
#+BEGIN_SRC sh
export LANG="en_US.UTF-8"
#+END_SRC

Override every default varible

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_35A437FE-A052-4125-8F69-20A929F8E118
#+BEGIN_SRC sh
export LC_ALL="en_US.UTF-8"
#+END_SRC

Sort how you expect it.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_ACFFFBB0-E8E9-4439-BD83-3480AA275A2C
#+BEGIN_SRC sh
export LC_COLLATE="POSIX"
#+END_SRC

Verify encoding for UTF-8 to work correctly.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_54E6F702-5327-41A1-A266-8300363A3466
#+BEGIN_SRC sh
function gcrencodingcheck {
  if [ "$(locale charmap)" == "UTF-8" ]; then
    printf "Character encoding expected to be 'UTF-8' and found it to be: CORRECT.\n"
  else
    printf "Character encoding expected to be 'UTF-8' and found it to be: INCORRECT as %s.\n" "$(locale charmap)"
  fi
}
gcrencodingcheck
#+END_SRC

**** Fontconfig
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:CA259BBD-7D76-4C57-BA3F-B8E1437C773E
:END:

Specify the X-Windows system configuration file.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_8256A72B-A6AF-4074-8EEC-98FFB829AB19
#+BEGIN_SRC sh
export FONTCONFIG_PATH=/opt/X11/lib/X11/fontconfig
#+END_SRC

** Common Configuration for Non-Interactive Use
:PROPERTIES:
:header-args: :noweb-ref BashNonInteractiveCore :comments no
:ID:       org_gcr_2017-05-12_mara:C8D58FA9-17C0-4474-AB1E-540F715C4970
:END:

Only use this functionality in a non-interactive session.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_481003BA-6E95-4F32-8FC4-23A919931953
#+BEGIN_SRC sh
if [ "$PS1" ]; then
    printf "Expected a non-interactive shell. 0F4DD650-97C5-492A-BCDD-8D74DBD8AAD0\n" 1>&2
    exit 1
fi
#+END_SRC

Never take input from the user interactively and disable the use of those
commands.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_DB35E7B7-3624-4FF2-9ADD-335909BEFB72
#+BEGIN_SRC sh
unset -f read select
#+END_SRC

Aliases are only for interactive users.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_F569D00F-DBAA-460F-BB01-7B4F28476B0E
#+BEGIN_SRC sh
shopt -u expand_aliases
#+END_SRC

** Common Configuration for Interactive Use
:PROPERTIES:
:header-args: :noweb-ref BashInteractiveCore :comments no
:ID:       org_gcr_2017-05-12_mara:4825F69D-14A3-43DB-A7FE-A49C3C038F95
:END:

Only use this functionality in an interactive session.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_0B6FF317-9B60-4BFA-83F7-D63D917BBDA5
#+BEGIN_SRC sh
if [ -z "$PS1" ] && [ -z "$DISPLAY" ]; then
    printf "Expected an interactive shell. E0DEB2B6-DE8B-4B8D-B2AC-2FEA7D5B6B4F\n" 1>&2
    exit 1
fi
#+END_SRC

To prevent Bash from interpreting the values as escape sequences use ~echo -e~ instead of ~printf~

*** Options
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:ADA5B8DA-2E4D-45F5-84E9-F71F51B37195
:END:
**** Expressivity
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:D707713A-4856-48D5-A32E-FF51DFE23E39
:END:

Programatically complete command options.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_8793176F-40C6-4AA9-86DD-8E306B4821A2
#+BEGIN_SRC sh
shopt -s progcomp
#+END_SRC

Completely things ignoring case. This belongs in the =~/inputrc= but I don't want to deal with that file and this is how to do that.

#+NAME: org_grant_2021-07-15T22-45-59-05-00_Sadie_CDD6D74F-ADB4-45F7-9902-1052D36D26DD
#+begin_src sh
bind "set completion-ignore-case on"
#+end_src

Aliases are only for interactive users.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_D3791EDF-59DE-4935-B804-B81B8350B154
#+BEGIN_SRC sh
shopt -s expand_aliases
#+END_SRC

**** History
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:171CCA0F-7C83-44F5-8A67-76976D7923C4
:END:

Enable command history.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_E3DEA841-A496-48AA-8139-DA234B02E93C
#+BEGIN_SRC sh
set -o history
shopt -s histappend
#+END_SRC

Enable ~!~ substitution.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_A0331EBC-EA7D-4CA2-9290-F27A04E70186
#+BEGIN_SRC sh
set -o histexpand
#+END_SRC

Re-edit historical multi-line commands.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_5FE7E6C7-56CC-48E0-BF30-43E217408179
#+BEGIN_SRC sh
shopt -s cmdhist
#+END_SRC

Separate lines with newline characters

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_9CC3AF80-74BE-4E1B-87DD-D5EF3C5EB880
#+BEGIN_SRC sh
shopt -s lithist
#+END_SRC

**** Interface
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:A090CEA5-4D16-4527-865A-2DBED7424266
:END:

Use EMACS keybindings for ~Readline~ and ~read~.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_018167EF-6446-4B9C-ADAB-A961069AB738
#+BEGIN_SRC sh
set -o emacs
#+END_SRC

When the command name is a directory in the =$PWD= pass it to =cd=.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_4F328706-CBAC-4F89-A457-CA35E364FD59
#+BEGIN_SRC sh
shopt -s autocd
#+END_SRC

Refresh ~LINES~ and ~COLUMNS~ after every command.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_B4B0412D-F14E-4D7D-8BA7-9F73784F6056
#+BEGIN_SRC sh
shopt -s checkwinsize
#+END_SRC

Automatically complete directory names and replace the original name value.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_1AE4C37C-DFFC-48B0-9B99-14CE8435AFD2
#+BEGIN_SRC sh
shopt -s complete_fullquote
#+END_SRC

Enable comments.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_73420B99-FD8E-4470-A1E8-490BB9AB62FC
#+BEGIN_SRC sh
shopt -s interactive_comments
#+END_SRC

**** Job Control
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:EEDDBEB4-0052-45DF-A0BE-88BE230308C9
:END:

Never exit a shell when there are still running or stopped jobs.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_F9A928CA-DFA3-4754-948D-351D6BBFF8DA
#+BEGIN_SRC sh
shopt -s checkjobs
#+END_SRC

Send =HUP= to all child processes when the interactive parent shell exits.

Use ~nohup~ for the opposite.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_8D6F0E61-9A42-4D76-A323-1812B75F9326
#+BEGIN_SRC sh
shopt -s huponexit
#+END_SRC

**** No Surprises
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:BF8365A6-5F55-4A16-9D0D-F4F7C7321779
:END:

Assume that the user (computer or human) provided the correct directory-name arguments to a command and do not modify them. Auto-correction of directory names can *at best* cause *complete disaster* for a distracted operator.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_873A00A3-B906-4F6D-B46D-19D7047F313E
#+BEGIN_SRC sh
shopt -u cdspell
#+END_SRC

For directories, too.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_F983ACF0-4E03-48AC-A84F-24418C43950D
#+BEGIN_SRC sh
shopt -u dirspell
#+END_SRC

It is too easy to leave a shell by typing ~Control-D~ accidentally. Prevent it.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_B7B60544-EBE1-4F0D-88C8-F1AA182AF39A
#+BEGIN_SRC sh
set -o ignoreeof
#+END_SRC

Never attempt to complete a command in the contents of =PATH= without starting text.
#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_D3F8A409-9F7E-4F8D-BBCD-C4A90F32CEF2
#+BEGIN_SRC sh
shopt -s no_empty_cmd_completion
#+END_SRC
*** Variables
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:679E2DA0-0A15-4A85-A034-8631D8F0594A
:END:

**** History
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:1819D813-3D7D-4F5D-99ED-D49932E5A265
:END:

Exclude the history of commands starting with a space. Commands entered multiple times are essential; keep their history (don't erase them).

Ignore every command that
- Starts with any number of spaces
- Starts with any number of tabs

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_265E647C-A9FA-446A-8A84-2FFEB5B9F411
#+BEGIN_SRC sh
export HISTIGNORE="[ \t]*"
#+END_SRC

Keep a rich and expansive history.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_CD8E7DFE-65C9-4139-8254-31B6EE9F2A97
#+BEGIN_SRC sh
HISTSIZE=250
HISTFILESIZE=250
SHELL_SESSION_HISTORY=-1
#+END_SRC

*Do Not* Track history by setting ~HISTTIMEFORMAT~: It breaks the resume feature in ~Terminal.app~.

**** User
:PROPERTIES:
:ID:       org_gcr_2019-08-11T16-10-48-05-00_cosmicality:F23F90E4-5B92-490B-A751-51EC89EB1225
:END:

Get timezones: ~sudo systemsetup -listtimezones~

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_25DFD1E8-1C14-4CE4-B04F-A15E3925BDE8
#+begin_src sh
export NAME="Grant Rettke"
export EMAIL="grant@wisdomandwonder.com"
export ORGANIZATION="Wisdom and Wonder"
export TZ="America/Chicago"
#+end_src

** Create the Global Shell Configuration Files
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:0D578995-CDE4-4247-9FE3-EDDBDFB6FB22
:END:

*** Create the Non-Interactive One: .bash_global_non_interactive
:PROPERTIES:
:header-args: :tangle ".bash_global_non_interactive" :comments no
:ID:       org_gcr_2017-05-12_mara:DB3A9415-85FC-46FD-BF39-F723E5235C3C
:END:

Neither Shellcheck nor Bash recognizes non-standard Bash configuration files like this. Therefore tell both Shellcheck and Emacs how to handle it: specify a Shellcheck directive and an Emacs file-local mode variable. Although a shebang could have worked for both of them, it shouldn't be present unless the file is a runnable script—which this is not.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_F9F1BC81-7520-447B-A109-BF751606EED7
#+BEGIN_SRC sh :comments no
# -*- mode: shell-script; sh-shell: bash; -*-
# shellcheck shell=bash
#+END_SRC

Every Bash session requires the same configuration.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_634C0987-EA09-47B9-8470-749A4C554F77
#+BEGIN_SRC sh
⟪BashCore⟫
#+END_SRC

Only non-interactive sessions requires this configuration.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_7EFCBF3C-69CF-4F80-B7AD-7034E0577A90
#+BEGIN_SRC sh
⟪BashNonInteractiveCore⟫
#+END_SRC

*** Create the Interactive One: .bash_global_interactive
:PROPERTIES:
:header-args: :tangle ".bash_global_interactive" :comments no
:ID:       org_gcr_2017-05-12_mara:1E8A5E47-9189-40EB-A9B9-8D4835775A7A
:END:

Neither Shellcheck nor Bash recognizes non-standard Bash configuration files like this. Therefore tell both Shellcheck and Emacs how to handle it: specify a Shellcheck directive and an Emacs file-local mode variable. Although a shebang could have worked for both of them, it shouldn't be present unless the file is a runnable script—which this is not.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_F707E96F-A74C-4FA9-9149-B7DDB72B218B
#+BEGIN_SRC sh :comments no
# -*- mode: shell-script; sh-shell: bash; -*-
# shellcheck shell=bash
#+END_SRC

Every Bash session requiress the same configuration.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_BD3F4F38-92D6-4310-9276-E7DCF825E421
#+BEGIN_SRC sh
⟪BashCore⟫
#+END_SRC

Only interactive sessions require this configuration.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_F55305F4-02E8-4610-9C08-8AD1FDD9A46B
#+BEGIN_SRC sh
⟪BashInteractiveCore⟫
#+END_SRC

* Wiring for Loading the Actual Daily Usage Configuration
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:BCD75F93-7AD8-49D6-A5CF-EF2AC6769098
:END:

** Use the Same Interactive Configuration for Non-Login Interactive Shells: .bash_login
:PROPERTIES:
:header-args: :tangle ".bash_login" :comments no
:ID:       org_gcr_2017-05-12_mara:93967906-378F-4A5B-B53F-1068F93DF8BB
:END:

Although this is a standard Bash configuration file and Emacs recognizes it Shellcheck does not. Therefore specify a Shellcheck directive. Although a shebang could have worked, it shouldn't be present unless the file is a runnable script—which this is not.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_4FB15878-C40F-4D80-A73B-B0D9A1561F58
#+BEGIN_SRC sh :comments no
# shellcheck shell=bash
#+END_SRC

Execute the same configuration as every non-login interactive shell.

This path *must be* fully-qualified.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_4C32C1AE-EF81-4469-9B77-78D2FEF9CD52
#+BEGIN_SRC sh
if [ -f /Users/grant/.bashrc ]; then
  source /Users/grant/.bashrc
fi
#+END_SRC

** Run This When You Log Out: .bash_logout
:PROPERTIES:
:header-args: :tangle ".bash_logout" :comments no
:ID:       org_gcr_2017-05-12_mara:04FEFF46-AAC6-4AB8-9876-199B271DA565
:END:

Although this is a standard Bash configuration file and Emacs recognizes it Shellcheck does not. Therefore specify a Shellcheck directive. Although a shebang could have worked, it shouldn't be present unless the file is a runnable script—which this is not.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_E467EC86-F272-47CD-B9F9-7655B3ACB0AF
#+BEGIN_src sh :comments no
#!/usr/local/bin/bash
# -*- mode: sh; -*-
#+END_SRC

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_EE58713E-028B-43CB-875A-6C3BBB6F28EA
#+BEGIN_src sh
printf "Logging out of Bash.\n"
#+END_SRC
* The Actual Daily Usage Configuration: .bashrc
:PROPERTIES:
:header-args: :tangle ".bashrc" :comments no
:ID:       org_gcr_2017-05-12_mara:93E59E15-9E26-4FEE-800A-4DB748AB395F
:END:

You should probably only be editing this headline.

** These Things Must Occur at the Very BEGINNING
:PROPERTIES:
:ID:       org_gcr_2019-11-25T18-49-26-06-00_gsmac:98614993-2913-437D-B755-2DD1B1878C6D
:END:

Although this is a standard Bash configuration file and Emacs recognizes it Shellcheck does not. Therefore specify a Shellcheck directive. Although a shebang could have worked, it shouldn't be present unless the file is a runnable script—which this is not.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_321C8889-A026-4FBF-B76A-EE8EF4AB7D9C
#+BEGIN_SRC sh :comments no
# shellcheck shell=bash
#+END_SRC

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_D5E7EF39-539B-4373-8F42-CAFFBE72C40F
#+BEGIN_SRC sh
source /Users/grant/src/bash/.bash_global_interactive
#+END_SRC
** Interactive Shell Prompt Values
:PROPERTIES:
:ID:       org_gcr_2019-11-30T12-40-47-06-00_gsmac:BB7109E6-E152-47E0-AEF1-3BDC58540D57
:END:

Prompt zero is displayed after you enter a command and before the command is executed.

Make the session easier to read.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_72CEF62C-3586-44DE-B6AA-2237D0CC34E3
#+BEGIN_SRC sh
export PS0="OK...\n\n"
#+END_SRC

Prompt one is the one that you see all the time.

Show enough to stay out of trouble.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_2347CD33-4AC1-4523-89CB-8B2B52D6A009
#+BEGIN_SRC sh
export PS1="\u@\h:\w⮞ "
#+END_SRC

Prompt two is the one that you see when you break a command into
multiple lines.

Emphasize what is happening because I usually end up here accidentally.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_09530882-ADE9-4970-AB87-8020083BC3D6
#+BEGIN_SRC sh
export PS2="(continued)⮞ "
#+END_SRC

Prompt three is the one that you see when you are presented with a menu
created using the ~select~ function.

You see it when ~select~ prompts you to make a selection.

The following [[https://askubuntu.com/questions/1705/how-can-i-create-a-select-menu-in-a-shell-script][example]] demonstrates its use:

#+BEGIN_EXAMPLE
export PS3="Please enter your choice: "
options=("Option 1" "Option 2" "Option 3" "Quit")
select opt in "${options[@]}"
do
    case $opt in
        "Option 1")
            echo "you chose choice 1"
            ;;
        "Option 2")
            echo "you chose choice 2"
            ;;
        "Option 3")
            echo "you chose choice 3"
            ;;
        "Quit")
            break
            ;;
        *) echo invalid option;;
    esac
done
#+END_EXAMPLE

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_F75C4DEC-3C19-45D4-8E6B-0990ABB665AC
#+BEGIN_SRC sh
export PS3="Please make a selection: "
#+END_SRC

Prompt four is what you see when you enable debugging with ~set -x~.

I copied this from the documentation.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_C160B43F-9CDC-4C19-9DD1-EE78E7AAA86F
#+BEGIN_SRC sh
export PS4='\nDEBUG level:$SHLVL subshell-level: $BASH_SUBSHELL \nsource-file:${BASH_SOURCE} line#:${LINENO} function:${FUNCNAME[0]:+${FUNCNAME[0]}(): }\nstatement: '
#+END_SRC

** Configure the Default Editor
:PROPERTIES:
:ID:       org_gcr_2019-11-25T18-49-26-06-00_gsmac:8A021170-0680-4409-93AC-7CD84CC6625E
:END:

Use Emacs for both the graphical and command-line operating system interface.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_42A51E66-5A0C-4FCE-9788-CD8BA85A6DBC
#+BEGIN_SRC sh
export VISUAL="emacs --no-desktop -quick"
export EDITOR="emacs --no-desktop -quick --no-window-system"
#+END_SRC

** Configuration for the "Batteries Included" Stuff from Apple
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:160278CE-DE40-44A7-9509-F17B3AD5A43A
:END:

*** Command Line
:PROPERTIES:
:ID:       org_grant_2021-07-15T00-19-57-05-00_Sadie:D5AFD427-C17A-4BE2-930F-B56BF3E7407C
:END:

Aliases and helper functions are likely to be here.

Application configuration will *not* be here.

Disks:

#+NAME: org_grant_2022-04-04T12-55-38-05-00_donutron_8559BDA9-45C6-4F05-AA23-AE569844959A
#+begin_src sh
alias dual="diskutil apfs list"
#+end_src

Checksumming.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_A1CD5BCA-9A8B-410C-BE5D-54C51BE32338
#+begin_src sh
alias shasum256printbin="shasum --algorithm 256 --binary"
alias shasum256printtxt="shasum --algorithm 256 --text"
alias shasum256check="shasum --algorithm 256 --check"
#+end_src

Configure common UNIX commands with aliases. The fact that these are aliases will be forgetten evidence has shown.

[[https://apple.stackexchange.com/questions/34054/case-insensitive-ls-sorting-in-mac-osx#81791][Here]] is the post about how to get alphabetical sorting out of Mac OS X's BSD ~ls~.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_D63C2874-1AA5-45A4-8AF5-7D22086D06D0
#+BEGIN_src sh
alias mkdir="mkdir -pv"
alias mount="mount | column -t"
alias df="df -h"
alias du="du -ach"
alias md5sum="md5 -r"
function tre {
  tree -d --noreport -q -Q -F -n --
}
#+END_SRC

Alias shortcuts to commands that I like to use but can't remember or are too long.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_4AA2E64E-7074-4F68-BC50-E3DE1158A50C
#+BEGIN_src sh
alias e=exit
alias j="jobs -l"
#+END_SRC

ls

#+NAME: org_grant_2022-04-08T12-31-05-05-00_donutron_2BC90DB4-5386-4BEA-AFB8-C8D90E6C9BDE
#+begin_src sh
function f {
  LC_COLLATE=en_GB.UTF-8 ls -aCFGhklpqT
}
#+end_src

Run a command multiple times.

#+NAME: org_gcr_2020-07-27T14-15-12-05-00_gsmac_297E8D9A-9719-4E08-B3EC-1CD1B2EB130E
#+BEGIN_SRC sh
function cpdirdt {
  if [[ -z "$1" || -z "$2" || -z "$3" ]] ; then
    printf "Usage: %s <SRCDIR> <DESTROOT> <DESTNAME>\n" "${FUNCNAME[0]}"
    printf "Recursively copy SRCDIR to a new folder in DESTROOT. The new folder is DESTNAME with an ISO-8601 timstamp appended.\n"
    return 1
  fi
  local srcdir="$1"
  local destroot="$2"
  if [[ ! -d "$srcdir" ]] ; then
    printf "Please verify that '%s' exists. \n" "$srcdir"
    return 1
  fi
  if [[ ! -d "$destroot" ]] ; then
    printf "Please verify that '%s' exists. \n" "$destroot"
    return 1
  fi
  local destname="$3"
  local destdir="$destroot/$destname-$(isodt)"
  mkdir "$destdir"
  if [[ ! -d "$destroot" ]] ; then
    printf "Destination directory '%s' does not exist. Exiting.\n" "$destdir"
    return 1
  fi
  printf "Created destination: '%s'\n" "$destdir"
  printf "Copying '%s' to '%s'.\n" "$srcdir" "$destdir"
  rsync -ah "$srcdir" "$destdir"
  if [ "$?" -ne 0 ] ; then
    printf "Rsync failed. Please investigate\n"
    return 1
  else
    printf "Rsync succeeded. Please investigate\n"
  fi
}
#+END_SRC

***** Directories
:PROPERTIES:
:ID:       org_grant_2022-04-04T12-55-38-05-00_donutron:FCD3F368-D080-47B2-9B13-5F0492CBFD54
:END:

#+NAME: org_grant_2022-04-04T12-55-38-05-00_donutron_3652B29B-1562-43D8-90EC-BA94A95D097D
#+begin_src sh
function tmp {
  SRCDIR="/Users/grant/.gnupg"
  if [[ ! -d "$SRCDIR" ]] ; then
    printf "Source directory '%s' does not exist. Exiting.\n" "$SRCDIR"
    exit 1
  fi
  DESTROOT="/Volumes/GCRCSA/dirs"
  DESTDIR="$DESTROOT/DOT-GNUPG-$(isodt)"
  mkdir "$DESTDIR"
  if [[ ! -d "$DESTDIR" ]] ; then
    printf "Destination directory '%s' does not exist. Exiting.\n" "$DESTDIR"
    exit 1
  fi
  printf "Created destination: '%s'\n" "$DESTDIR"
  rsync -ah "$SRCDIR" "$DESTDIR"
  if [ "$?" -ne 0 ] ; then
    printf "Rsync failed. Please investigate\n"
  else
    printf "Rsync succeeded. Please investigate\n"
  fi
}

#+end_src

***** date
:PROPERTIES:
:ID:       org_grant_2022-04-04T12-55-38-05-00_donutron:8A7A2C41-67CC-404A-BC3D-DE5C037E370A
:END:

Get a date from the built in macOS tools.

- Goal build an ISO-8601 formatted string
  - Not going to milliseconds
  - By default make filename safe, override for colons

- From the ~strftime*~ man page
  - %Y    is replaced by the year with century as a decimal number
  - %m    is replaced by the month as a decimal number (01-12)
  - %d    is replaced by the day of the month as a decimal number (01-31)
  - %H    is replaced by the hour (24-hour clock) as a decimal number
  - %M    is replaced by the minute as a decimal number (00-59).
  - %S    is replaced by the second as a decimal number (00-60)
  - %Z    is replaced by the time zone name

#+NAME: org_grant_2022-04-04T12-55-38-05-00_donutron_2A9DA401-515D-4B0A-A281-0D9FDB968D21
#+begin_src sh
function isodt {
  local sep="-"
  if [[ -n "$1" ]] ; then
    sep=":"
  fi
  date "+%Y-%m-%dT%H$sep%M$sep%S%Z"
}
#+end_src

**** Random Related
:PROPERTIES:
:ID:       org_grant_2022-01-02T02-46-41-06-00_Sadie:2289D004-9940-4CFD-879F-2517C307C669
:END:

- Includes:
  - A random integer in range
  - English Word
  - BIP-39 seed from the reference list

#+NAME: org_grant_2021-08-09T16-29-07-05-00_Sadie_260EFA32-D846-4B09-9FAA-721AA272F279
#+begin_src sh
function randomints () {
  if [[ $# -ne 3 || -z "$1" || -z "$2" || -z "$3" ]] ; then
    printf "Usage: %s <COUNT> <MIN> <MAX>\n" "${FUNCNAME[0]}"
    printf "Create COUNT integers x where: \n"
    printf "  COUNT > 0\n"
    printf "  MIN <= x <= MAX\n"
    printf "  COUNT, MIN, and MAX are integers.\n"
    printf "Looks like there aren't enough arguments.\n"
    return 1
  fi
  count="$1"
  min="$2";
  max="$3"
  if (( $count < 1 )) ; then
    printf "Usage: %s <COUNT> <MIN> <MAX>\n" "${FUNCNAME[0]}"
    printf "Create COUNT integers x where: \n"
    printf "  COUNT > 0\n"
    printf "  MIN <= x <= MAX\n"
    printf "  COUNT, MIN, and MAX are integers.\n"
    printf "Looks like COUNT is less than 1.\n"
    return 1
  elif (( $max < $min )) ; then
    printf "Usage: %s <COUNT> <MIN> <MAX>\n" "${FUNCNAME[0]}"
    printf "Create COUNT integers x where: \n"
    printf "  COUNT > 0\n"
    printf "  MIN <= x <= MAX\n"
    printf "  COUNT, MIN, and MAX are integers.\n"
    printf "Looks like MAX < MIN.\n"
    return 1
  fi
  result=`jot -r "$count" "$min" "$max"`
  printf "%s\n" "$result"
}

function randomwordenglish () {
  /Users/grant/util/randomline.perl --filename /Users/grant/src/english-words/words.txt
}

function randomwordbip39 () {
  ~/util/randomline.perl --filename ~/src/bitcoin-bip-39-ref-impl/src/mnemonic/wordlist/english.txt
}
#+end_src

*** GUI
:PROPERTIES:
:ID:       org_grant_2021-07-15T00-19-57-05-00_Sadie:CF3280A2-88F5-486F-9053-28CC6D519F05
:END:

Toggle grayscale.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_F1D33BB7-E1D7-4D87-83BC-F2D6EE2CB318
#+begin_src sh
alias togglegrayscale="osascript /Users/grant/util/sspadtogglegrayscale.scpt"
#+end_src

Invert colors.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_B5C1EDD5-6C74-49F7-BBE5-BC3E24CD7B96
#+begin_src sh
alias invertcolors="osascript /Users/grant/util/sspadtogglecolors.scpt"
#+end_src

Start screensaver.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_65FC6156-897D-4227-8011-B5AD13E59471
#+begin_src sh
alias sav="osascript /Users/grant/util/Start-Screensaver.scpt"
#+end_src

** Configuration for Externally Provided Programs
:PROPERTIES:
:ID:       org_gcr_2019-11-25T18-49-26-06-00_gsmac:4A2D731B-B043-4662-9E58-032418959E39
:END:

Some programs are installed from an external source example ~ccrypt~.

Other instances of the same program being provided both internally by Apple and externally by installation. For example, Bash, Git, and Emacs.

Use ~EXTPATH~ to set their directories first.

#+NAME: org_grant_2022-05-25T20-38-13-05-00_donutron_77F63BD2-3438-4AAD-AFA2-B4887748E4D4
#+begin_src sh
export EXTPATH=""
#+end_src

*** brew
:PROPERTIES:
:ID:       org_grant_2022-03-18T20-41-47-05-00_Techs-MBP:C386B35A-4692-404C-AD9F-34DB7697176D
:END:

#+NAME: org_grant_2022-03-18T20-41-47-05-00_Techs-MBP_C900E31D-97E5-49D2-AA48-27D28587E8B8
#+begin_src sh
export HOMEBREW_NO_ANALYTICS=1
export HOMEBREW_INSTALL_BADGE="😺"
#+end_src

*** ccrypt
:PROPERTIES:
:ID:       org_gcr_2019-11-25T18-49-26-06-00_gsmac:B718FE1D-4D3D-47E3-B062-F1FDA900A82D
:END:

#+begin_quote
ccrypt is a tool for encrypting and decrypting files and streams.
#+end_quote

Use it from within Emacs.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_E7F8D5EE-7E00-4895-A260-21E8A3360C34
#+BEGIN_SRC sh
export TODOCCRYPT="/usr/local/Cellar/ccrypt/1.11/"
#+END_SRC

*** TeX
:PROPERTIES:
:ID:       org_gcr_2019-11-25T18-49-26-06-00_gsmac:0D346D38-1207-48C3-99AE-0AC668DF130B
:END:

#+begin_quote TeX (= tau epsilon chi, and pronounced similar to "blecch", not to the state known for `Tex-Mex' chili) is a computer language designed for use in typesetting; in particular, for typesetting math and other technical (from Greek "techne" = art/craft, the stem of `technology') material.#+end_quote

MacTeX is TeX for the Mac.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_1FC17A94-BCA1-4DE2-AF9A-DE7597E73084
#+BEGIN_SRC sh
export MACTEX_HOME="/usr/local/texlive/2021"
export MACTEX_BIN="$MACTEX_HOME/bin/universal-darwin"
export EXTPATH="$MACTEX_BIN:$EXTPATH"
#+END_SRC

#+NAME: org_gcr_2020-07-27T14-15-12-05-00_gsmac_7180DE37-3BD7-4842-819C-87D93DE0B06D
#+BEGIN_SRC sh
alias texshop="open /Applications/TeX/TeXShop.app/"
#+END_SRC
#+NAME: org_grant_2021-12-03T19-35-42-06-00_Sadie_002602D8-1B3B-4C03-9A8A-916EA55E9177
#+begin_src sh
function pdf2epslevel3 {
  if [[ $# -ne 2 || -z "$1" || -z "$2" ]] ; then
    printf "Usage: %s <SOURCE PDF> <DEST EPS>\n" "${FUNCNAME[0]}"
    printf "Use pdf2ps to convert SOURCE PDF file to *Level 3* DEST EPS file.\n"
    return 1
  elif [[ ! -f "$1" ]] ; then
    printf "Usage: %s <SOURCE PDF> <DEST EPS>\n" "${FUNCNAME[0]}"
    printf "I can't find the SOURCE PDF file '%s' so I'm bailing.\n" "$1"
    return 1
  elif [[ -f "$2" ]] ; then
    printf "Usage: %s <SOURCE PDF> <DEST EPS>\n" "${FUNCNAME[0]}"
    printf "The DEST PDF file '%s' already exists so I'm bailing.\n" "$2"
    printf "Delete '%s' first then try this command again.\n" "$2"
    return 1
  fi
  pdf2ps -dLanguageLevel=3 "$1" "$2"
}
#+end_src

*** Git
:PROPERTIES:
:ID:       org_gcr_2019-11-25T18-49-26-06-00_gsmac:F467F415-1A7A-451B-99D7-1DCE1804BBA9
:END:

#+begin_quote
Git is a fast, scalable, distributed revision control system with an unusually rich command set that provides both high-level operations and full access to internals. #+end_quote

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_121CCF66-A7DD-479D-AFCE-658143CCDDC4
#+BEGIN_SRC sh
alias g="git"
alias ga="git add ."
alias gb="git branch"
alias gbco="git checkout -b "
alias gcm="git commit -a"
alias gdf="git diff"
alias gdfc="git diff --cached"
alias gdfg="git difftool"
alias gdfgc="git difftool --cached"
alias gdisc="git checkout -- ."
alias ggss="~/git/github/recursive-git-status-bash/recursive-git-status.sh"
alias gitddiff="git diff --name-status"
alias gitforcepush="git push origin +master"
alias gitlog="git log --graph --oneline --decorate"
alias gitlogone='git log --follow --full-history --reverse --date=short --format="%ad %s %b"'
alias gitshowreleases="git tag -l"
alias gitshowtags='git log --tags --simplify-by-decoration --pretty="format:%ai %d"'
alias gituncommit="git reset --mixed HEAD^"
alias gitunpull="git reset --keep HEAD@{1}"
alias gitunstage="git reset"
alias gl="git log"
alias gp="git push"
alias gpdrd="git fetch && git difftool origin/master"
alias gpdrsd="git fetch && git diff --dirstat origin/master"
alias gpdrsf="git fetch && git diff --stat origin/master"
alias gpl="git pull"
alias gpom="git push origin master"
alias grv="git remote -v"
alias gs="git status"
alias gsubstat="git submodule status"
alias gsubstatr="git submodule status --recursive"
#+END_SRC

Git usability.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_89EDF172-801F-4804-AE2C-05AA7B4BC4E9
#+begin_src sh
function gitdid {
  git shortlog --summary --numbered --all --email
}

function gitgreplog {
  if [[ $# -eq 0 || -z "$1" ]] ; then
    printf "Search Git commit message history for TEXT case-insensitively.\n"
    printf "Usage: %s \"<required search string(s)>\" <optional additional parameters>\n" "${FUNCNAME[0]}"
    printf "For example add '--name-status' to include the changed-file-status before switching to 'git log #' or 'git diff #' to dig deeper."
    return 1
  fi
  local text=$1
  shift
  local cmd="git log --oneline --regexp-ignore-case --grep='$text' $*"
  printf "%s\n" "$cmd"
  eval "$cmd"
}
function gitgrepchange {
  if [[ $# -eq 0 || -z "$1" ]] ; then
    printf "Search Git commit change history for TEXT case-insensitively.\n"
    printf "Usage: %s \"<required search string(s)>\" <optional additional parameters>\n" "${FUNCNAME[0]}"
    printf "For example add '--oneline' for a succinct report or '--name-status' to include the changed-file-status before switching to 'git log #' or 'git diff #' to dig deeper."
    return 1
  fi
  local text=$1
  shift
  local cmd="git log --pickaxe-all --pickaxe-regex -S'$text' $*"
  printf "%s\n" "$cmd"
  eval "$cmd"
}

function gitauthorhistory {
  if [[ $# -eq 0 || -z "$1" ]] ; then
    printf "Usage: %s AUTHOR.\n" "${FUNCNAME[0]}"
    printf "Show commit log for AUTHOR name.\n"
    return 1
  fi
  local name=$1
  git log --author="$name"
}

function gitfilehistoryfull {
  if [[ $# -gt 0 && -n "$1" && -e "$1" ]] ; then
    local file="$1"
    git log --patch --follow --full-history "$file"
  else
    printf "Usage: %s FILE.\n" "${FUNCNAME[0]}"
    printf "Show commit log for FILE with *Full History*.\n"
    return 1
  fi
}

function gitfilehistorysimple {
  if [[ $# -gt 0 && -n "$1" && -e "$1" ]] ; then
    local file="$1"
    git log --patch --follow -- "$file"
  else
    printf "Usage: %s FILE.\n" "${FUNCNAME[0]}"
    printf "Show fcommit log for FILE with *Simplified History*.\n"
    return 1
  fi
}

alias gfh=gitfilehistorysimple
alias gfhf=gitfilehistoryfull
#+end_src

bash-git-prompt.

#+NAME: org_grant_2021-07-12T10-27-24-05-00_Sadie_AEA309FA-A780-48D1-AAEA-B4062F915914
#+begin_src sh
if [ -f "$HOME/src/bash-git-prompt/gitprompt.sh" ]; then
  export GIT_PROMPT_ONLY_IN_REPO=1
  source "/Users/grant/src/bash-git-prompt/gitprompt.sh"
fi
#+end_src

*** Emacs
:PROPERTIES:
:ID:       org_gcr_2019-11-25T18-49-26-06-00_gsmac:D05FA841-34B3-459F-9C14-283520F1FF1C
:END:

#+begin_quote
An extensible, customizable, free/libre text editor — and more.

At its core is an interpreter for Emacs Lisp, a dialect of the Lisp programming language with extensions to support text editing.
#+end_quote

Include Emacs's ~INFO~ files.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_F75AEC7A-88E0-4D11-B950-740FD568F659
#+BEGIN_SRC sh
export INFOPATH="/Applications/Emacs.app/Contents/Resources/info:$INFOPATH"
#+END_SRC

Configure Bash to run under Emacs in Terminal.app.

Terminal.app requires the function ~update_terminal_cwd~. It /isn't/ present when you start Bash from within Emacs. In that case, define it.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_C617F66A-B15C-4E1B-B113-C22C53DC9A8C
#+begin_src sh
if [ -z "$(type -t update_terminal_cwd)" ] || [ "$(type -t update_terminal_cwd)" != "function" ]; then
  update_terminal_cwd() {
    true
  }
fi
#+end_src

Load the Lolsmacs configuration.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_B22F92F4-FDD8-402B-A801-4BFBE877E830
#+BEGIN_src sh
source /Users/grant/src/myamacs/amacs
#+END_SRC

*** golang
:PROPERTIES:
:ID:       org_grant_2021-07-12T10-27-24-05-00_Sadie:7019641C-EE41-4A43-B396-293B059991FB
:END:

#+begin_quote
Go is an open source programming language that makes it easy to build simple, reliable, and efficient software.
#+end_quote

Define the Global and Personal path.

#+NAME: org_grant_2021-07-12T10-27-24-05-00_Sadie_241AF44A-A4A6-4F18-972B-217C5C0D2731
#+begin_src sh
export EXTPATH="/usr/local/go/bin:~/go/bin:$EXTPATH"
#+end_src

*** ffmpeg
:PROPERTIES:
:ID:       org_grant_2021-07-15T00-19-57-05-00_Sadie:262071C3-7E66-4C51-976E-8F57EF8B5359
:END:

Helper functions.

#+NAME: org_gcr_2020-05-25T18-54-59-05-00_gsmac_C10FF5EA-C5EC-4D81-AA6F-C38FF1042931
#+BEGIN_SRC sh
function aac2mp3 {
  if [[ $# -ne 2 || -z "$1" || -z "$2" ]] ; then
    printf "Usage: %s <Source> <Destination>\n" "${FUNCNAME[0]}"
    printf "FFmpeg converts SOURCE AAC file to DESTINATION MP3 file.\n"
    return 1
  elif [[ ! -f "$1" ]] ; then
    printf "Usage: %s <Source> <Destination>\n" "${FUNCNAME[0]}"
    printf "I can't find the SOURCE AAC file '%s' so I'm bailing.\n" "$1"
    return 1
  elif [[ -f "$2" ]] ; then
    printf "Usage: %s <Source> <Destination>\n" "${FUNCNAME[0]}"
    printf "The DESTINATION file '%s' already exists so I'm bailing.\n" "$2"
    printf "Delete '%s' first then try this command again.\n" "$2"
    return 1
  fi
  ffmpeg -i "$1" -vn -ar 44100 -ac 2 -b:a 192k "$2"
}

function mp42m4a {
  if [[ $# -ne 2 || -z "$1" || -z "$2" ]] ; then
    printf "Copy MP4 SOURCE's unencoded audio stream into the DESTINATION M4A file.\n"
    printf "Run 'ffprobe SOURCE' to learn more about its contents.\n"
    return 1
  elif [[ ! -f "$1" ]] ; then
    printf "Usage: %s <Source> <Destination>\n" "${FUNCNAME[0]}"
    printf "I can't find the SOURCE file '%s' so I'm bailing.\n" "$1"
    return 1
  elif [[ -f "$2" ]] ; then
    printf "Usage: %s <Source> <Destination>\n" "${FUNCNAME[0]}"
    printf "The DESTINATION file '%s' already exists so I'm bailing.\n" "$2"
    printf "Delete '%s' first then try this command again.\n" "$2"
    return 1
  fi
  ffmpeg -i "$1" -vn -acodec copy "$2"
}

function mp42x {
  if [[ $# -ne 2 || -z "$1" || -z "$2" ]] ; then
    printf "Usage: %s <SOURCE> <DESTINATION>\n" "${FUNCNAME[0]}"
    printf "Create DESTINATION by doubling both the video and audio speed of the MP4 SOURCE file.\n"
    return 1
  elif [[ ! -f "$1" ]] ; then
    printf "Usage: %s <Source> <Destination>\n" "${FUNCNAME[0]}"
    printf "I can't find the SOURCE file '%s' so I'm bailing.\n" "$1"
    return 1
  elif [[ -f "$2" ]] ; then
    printf "Usage: %s <Source> <Destination>\n" "${FUNCNAME[0]}"
    printf "The DESTINATION file '%s' already exists so I'm bailing.\n" "$2"
    printf "Delete '%s' first then try this command again.\n" "$2"
    return 1
  fi
  ffmpeg -i "$1" -filter_complex "[0:v]setpts=0.5*PTS[v];[0:a]atempo=2.0[a]" -map "[v]" -map "[a]" "$2"
}
#+END_SRC

*** ripgrep
:PROPERTIES:
:ID:       org_grant_2021-07-17T11-48-12-05-00_Sadie:F2E86256-9A84-4828-ABDD-D3CC016D1BF7
:END:

#+NAME: org_grant_2021-07-17T11-48-12-05-00_Sadie_F9D58A54-4827-4903-8FFA-E3A85BD6850A
#+begin_src sh
export RIPGREP_CONFIG_PATH="/Users/grant/src/ripgreprc/.ripgreprc"
#+end_src
*** Bitcoin
:PROPERTIES:
:ID:       org_grant_2021-09-28T17-39-12-05-00_Sadie:BA7D39C4-863A-4D3E-8C34-8D278211FD9A
:END:

#+NAME: org_grant_2021-09-28T17-39-12-05-00_Sadie_6FCE01F7-EFA5-4D2F-BBC8-B4C307A90EB6
#+begin_src sh
function btcmainnet {
  if [[ $# -ne 1 || -z "$1" || "$1" != "MAIN-NET-MAIN-NET-MAIN-NET" ]] ; then
    printf "Usage: %s %s\n" "${FUNCNAME[0]}" "MAIN-NET-MAIN-NET-MAIN-NET"
    printf "Start Bitcoin-Qt on the Bitcoin MAIN-NET by providing the excruciatingly verbose reminder argument: \"MAIN-NET-MAIN-NET-MAIN-NET\"\n"
    return 1
  else
    open /Applications/Bitcoin-Qt.app --args "$@"
  fi
}

function btctestnet {
  if [[ $# -ne 1 || -z "$1" || "$1" != "TEST-NET-TEST-NET-TEST-NET" ]] ; then
    printf "Usage: %s %s\n" "${FUNCNAME[0]}" "TEST-NET-TEST-NET-TEST-NET"
    printf "Start Bitcoin-Qt on the Bitcoin TEST-NET by providing the excruciatingly verbose reminder argument: \"TEST-NET-TEST-NET-TEST-NET\"\n"
    return 1
  else
    open /Applications/Bitcoin-Qt.app --args -testnet "$@"
  fi
}
#+end_src

**** Sparrow
:PROPERTIES:
:ID:       org_grant_2021-10-18T19-40-10-05-00_Sadie:1069B9D5-15AC-4060-8641-D47B60028EFD
:END:

#+NAME: org_grant_2021-10-18T19-40-10-05-00_Sadie_5198F10F-61E2-4433-8B17-31DBD037AB94
#+begin_src sh
function sparrowmainnet {
  if [[ $# -ne 1 || -z "$1" || "$1" != "MAIN-NET-MAIN-NET-MAIN-NET" ]] ; then
    printf "Usage: %s %s\n" "${FUNCNAME[0]}" "MAIN-NET-MAIN-NET-MAIN-NET"
    printf "Start Sparrow on the Bitcoin MAIN-NET by providing the excruciatingly verbose reminder argument: \"MAIN-NET-MAIN-NET-MAIN-NET\"\n"
    return 1
  else
    open /Applications/Sparrow.app --args --network mainnet "$@"
  fi
}

function sparrowtestnet {
  if [[ $# -ne 1 || -z "$1" || "$1" != "TEST-NET-TEST-NET-TEST-NET" ]] ; then
    printf "Usage: %s %s\n" "${FUNCNAME[0]}" "TEST-NET-TEST-NET-TEST-NET"
    printf "Start Sparrow on the Bitcoin TEST-NET by providing the excruciatingly verbose reminder argument: \"TEST-NET-TEST-NET-TEST-NET\"\n"
    return 1
  else
    open /Applications/Sparrow.app --args --network testnet "$@"
  fi
}
#+end_src

Fallback to TESTNET:

#+NAME: org_grant_2021-10-18T19-40-10-05-00_Sadie_95EBFFA4-0768-46F2-9041-20CE23C71877
#+begin_src sh
export SPARROW_NETWORK=testnet
#+end_src

*** Python
:PROPERTIES:
:ID:       org_grant_2021-12-13T00-07-24-06-00_Sadie:360919A5-320B-4D07-BD6B-504D48BC032E
:END:

Use the manually installed Python.

#+NAME: org_grant_2021-12-13T00-07-24-06-00_Sadie_7231FE3B-2A4C-47D0-870C-902B134EC862
#+begin_src sh
export EXTPATH="/Library/Frameworks/Python.framework/Versions/3.10/bin:$EXTPATH"
#+end_src

*** Inkscape
:PROPERTIES:
:ID:       org_grant_2021-12-17T13-51-48-06-00_Sadie:7CB5DB1E-E055-4533-9597-228BD3383B88
:END:

#+NAME: org_grant_2021-12-17T13-51-48-06-00_Sadie_FA8E62B9-0538-41E2-BFD5-E5F50A71F01B
#+begin_src sh
alias is="/Applications/Inkscape.app/Contents/MacOS/inkscape"
#+end_src

*** youtube-dl
:PROPERTIES:
:ID:       org_grant_2022-04-06T20-47-07-05-00_donutron:53866FA7-3C29-4D9D-83A1-CFBD159A9E4C
:END:

Options Notes:
-f, --format FORMAT                  Video format code, see the "FORMAT
                                     SELECTION" for all the info
- -F, --list-formats                   List all available formats of requested
- --audio-quality QUALITY              Specify ffmpeg/avconv audio quality,
                                     insert a value between 0 (better) and 9
                                     (worse) for VBR or a specific bitrate
                                     like 128K (default 5)
- --recode-video FORMAT                Encode the video to another format if
                                     necessary (currently supported:
                                     mp4|flv|ogg|webm|mkv|avi)
- --embed-subs                          Embed subtitles in the video (only for
- --embed-thumbnail
- -o, --output TEMPLATE                Output filename template, see the
                                     "OUTPUT TEMPLATE" for all the info

Config:
- user wide configuration file at ~/.config/youtube-dl/config
- --config-location PATH

#+NAME: org_grant_2022-04-06T20-47-07-05-00_donutron_D73367A6-1ABA-4333-A3AD-C03D8DCB3BE4
#+begin_src sh
function ytdl {
  if [[ $# -ne 1 || -z "$1" ]] ; then
    printf "Usage: %s <URL>\n" "${FUNCNAME[0]}"
    printf "Download YouTube URL video with thumbnail and subtitles.\n"
    return 1
  fi

  youtube-dl \
    -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best' \
      --embed-thumbnail \
      --embed-subs \
      "$1"
}
#+end_src

*** QEMU
:PROPERTIES:
:ID:       org_grant_2022-06-12T22-54-38-05-00_donutron:76D4F630-B6AB-424B-ACDE-520CE7AC49FA
:END:

**** G4
:PROPERTIES:
:ID:       org_grant_2022-06-15T15-47-51-05-00_donutron:3D5B4835-A045-46F8-87CA-A8F24FE74D47
:END:

#+NAME: g4base
#+begin_src sh :tangle no
  qemu-system-ppc \
    -prom-env  "boot-args=-v serial=3 debug=0x14e" \
    -serial    stdio \
    -name      "$1" \
    -k         en-us \
    -m         "$2"M \
    -display   cocoa \
    -g         1440x900x32 \
    -device    VGA,edid=on,vgamem_mb=64,xres=1440,yres=900 \
    -prom-env  "vga-ndrv?=true" \
    -rtc       base=localtime,clock=host \
    -L         pc-bios \
    -machine   mac99,via=pmu \
    -cpu       G4 \
    -accel     tcg,tb-size=2048,thread=single \
    -smp       cpus=1,sockets=1,threads=1 \
    -uuid      ac70e49e-6408-4c9f-8482-9ee9a0359403 \
    -device    usb-kbd \
    -device    usb-mouse \
    -nic       user,model=e1000,net=192.168.94.0/24,host=192.168.94.94,dhcpstart=192.168.94.100,mac=e0:22:c1:97:fe:94 \
    -prom-env  "auto-boot?=true" \
    -no-reboot \
    -boot      "$3" \
#+end_src

#+NAME: org_grant_2022-07-08T00-12-17-05-00_donutron_A9352273-D58A-4202-BDD1-928A30D344A2
#+begin_src sh
function g4hd {
  ⟪g4base⟫
  -drive     file="$4",format="$5",media=disk &
}

function g4cd {
  ⟪g4base⟫
  -drive     file="$4",index=2,media=cdrom &
}

function g4hdcd {
  ⟪g4base⟫
  -drive     file="$4",format="$5",media=disk \
  -drive     file="$6",index=2,media=cdrom &
}

function g4hdhdcd {
  ⟪g4base⟫
  -drive     file="$4",format="$5",media=disk \
  -drive     file="$6",format="$7",media=disk \
  -drive     file="$8",index=2,media=cdrom &
}
#+end_src

*** hunspell
:PROPERTIES:
:ID:       org_grant_2022-09-02T20-25-37-05-00_donutron:46F1F28C-E5B6-49C8-8CCA-ACC282DBDA5A
:END:

#+NAME: org_grant_2022-09-02T20-25-37-05-00_donutron_AA9F3077-0374-432A-96A1-848EC3FC9E62
#+begin_src sh
export DICPATH="/usr/local/share/words/"
#+end_src

*** vale
:PROPERTIES:
:ID:       org_grant_2022-09-14T22-14-33-05-00_donutron:24213E14-48EF-4A8F-9ED8-24365A3AEAFD
:END:

#+NAME: org_grant_2022-09-14T22-14-33-05-00_donutron_F2531609-AD15-4A42-B239-64C7C4780EA6
#+begin_src sh
function val {
  vale --output /Users/grant/src/flycheck-org-vale/flycheck-org-vale.tmpl "$@"
}
#+end_src

*** pandoc
:PROPERTIES:
:ID:       org_grant_2022-09-19T23-11-59-05-00_donutron:9687F369-C31B-4144-8367-BC99C6B1210B
:END:

#+NAME: org_grant_2022-09-19T23-11-59-05-00_donutron_AF020301-B50D-4BA1-9CE2-6396991ED6A9
#+begin_src sh
function pdoc {
  if [[ $# -ne 2 || -z "$1" || -z "$2" ]] ; then
    printf "Usage: %s <SOURCE> <DESTINATION>\n" "${FUNCNAME[0]}"
    printf "Convert Org SOURCE to Docx DESTINATION.\n"
    return 1
  fi
  pandoc --defaults="/Users/grant/src/pandoc-data-dir/defaults.yml" \
         --output="$2" \
         "$1"
}
#+end_src

** Path Assemply
:PROPERTIES:
:ID:       org_gcr_2019-11-25T18-49-26-06-00_gsmac:82AF307A-CE58-4E51-98D7-DFC0549CAC76
:END:

- Directories
  - External
  - Brew
  - Personal
  - System
#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_BC48EB6B-F2BA-4C08-B431-07A3C5D3EF1F
#+BEGIN_SRC sh
export PATH="$EXTPATH:/usr/local/bin:/Users/grant/util:$PATH"
#+END_SRC

