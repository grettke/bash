* Provision
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:8A1F73F9-332A-46CD-A339-AFCD19EE466C
:END:
** Global
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:A9BD0A2F-5066-4349-8DB3-20E58925B2E5
:END:

*** BashCore
:PROPERTIES:
:header-args: :noweb-ref BashCore
:ID:       org_gcr_2017-05-12_mara:F5ED8B16-23A9-4FB2-88A8-A340984AF656
:END:

Define this system using Bash 4.3.* features. Warn if not at least.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_435FF2EC-213F-4D6A-94B9-613AD6F153DD
#+BEGIN_SRC sh :tangle
function gcrbashcheck {
  local expected_major=4
  local expected_minor=3
  local actual_major="${BASH_VERSINFO[0]}"
  local actual_minor="${BASH_VERSINFO[1]}"
  printf "Using Bash %s\n" "$BASH_VERSION"
  if [[ $actual_major -gt $expected_major ]]; then
    return
  elif [[ $actual_major -eq $expected_major && $actual_minor -ge $expected_minor ]]; then
    return
  else
    printf "\e[31mFYI: Using Bash v$actual_major.$actual_minor but expecting Bash >= v$expected_major.$expected_minor\e[0m\n" 1>&2
  fi
}
gcrbashcheck
#+END_SRC

**** Options
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:17314013-60AE-48F8-BF54-CAF94D285E32
:END:
***** Expressivity
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:BAED844A-0444-40DE-9052-F5DCFD0BF1C9
:END:

Programatically generate expressions (Brace Expansion) using
- Sequence of comma separated names
- Pattern matching to create a list of names of files
- Sequence expression

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_E96DA766-2B22-430B-A38C-78E261051396
#+BEGIN_SRC sh
set -o braceexpand
#+END_SRC


Define key-pair values for command's dynamic extent before calling the command
and nowhere else. Doing otherwise breaks ~alias~ for example in a surprising way.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_66B9DD8E-B586-4738-84CC-28E8874A455D
#+BEGIN_SRC sh
set +o keyword
#+END_SRC

***** Fail Fast
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:EE650225-E984-4C7D-8D73-B027A50000BD
:END:

Exit immediately when a command in a pipeline fails. Assume the worst. If the
result of calling the failed command is not an emergency, then find the
parameter for that command which prevents it from reporting a failure. This
looks like an extreme configuration decision, but it isn't. The behavior is
disabled for the following expected situations where the command is

- Exceptions
  - in ~while~ or ~until~ block
  - is part of an ~if~ test
  - short-circuit evaluation
    - surprised at this behavior!
    - but for the last command
  - any command in a pipeline but the last
    - surprised at this behavior!
  - having it's return status inverted by ~!~
- This seems strange; I read this as we won't get the desired behavior during a
  sequence of express and that is the exact place where we want that behavior.
  Perform research on this.

When an error occurs remain in the shell so that the system operator can
research wha happened in that context. Don't exit the shell because there was
an error. Enabling this causes the shell to exit immediately.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_967CE969-FFC5-472B-AE89-239CE444DC3A
#+BEGIN_SRC sh
set +o errexit
#+END_SRC

The result of a pipeline is the result of the last expression to exit on error
or zero if they all completed successfully. This reads like "short circuit"
evaluation but I'm not sure it is. Perform research on this.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_20398471-203E-4F93-8D03-0DBB02A274B8
#+BEGIN_SRC sh
set -o pipefail
#+END_SRC

When there are no file matches found report an error.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_8B5E53E8-0EE3-4DF2-A3E9-41FCF1CCD2C7
#+BEGIN_SRC sh
shopt -s failglob
#+END_SRC

Report an error when you ~shift~ more parameters than you received.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_3E25F3E3-E0F6-4D80-A6DB-94C3303F3B4B
#+BEGIN_SRC sh
shopt -s shift_verbose
#+END_SRC

***** Inheritance
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:468DE01C-7493-4307-8CF2-1C736E06F38A
:END:

Every change (creation and modification) made to the parent shell
environment (functions and variables) should *not* be automatically exported to every
child shell environment because it is isn't intuitive to virtually every Bash user.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_C1364853-3E34-472B-8004-BF3BC47EEE97
#+BEGIN_SRC sh
set +o allexport
#+END_SRC

Do the same thing for the ~ERR~ trap.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_1F299BFF-21E0-4D50-A713-17C9C8CADE62
#+BEGIN_SRC sh
set -o errtrace
#+END_SRC

Do the same thing for the ~DEBUG~ and ~RETURN~ traps.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_5648762E-59A3-41F3-8380-ADCBA7CA5460
#+BEGIN_SRC sh
set -o functrace
#+END_SRC

Pass a non-directory arguments to =cd= and change to the value of that variable.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_5086373B-8721-4CDD-AA92-B75DA243C6E9
#+BEGIN_SRC sh
shopt -s cdable_vars
#+END_SRC

***** Job Control
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:7532ECDF-3E4A-4A4E-B522-6507E1636AB2
:END:

Enable it.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_AF2A0697-02F6-4E62-B57B-A115A7CD7B4B
#+BEGIN_SRC sh
set -o monitor
#+END_SRC

Immediately report terminated job status. This might appear to be a Interactive
feature, but it isn't. It appears hear reporting errors in the log file
immediately realizing this Bash configurations "Fail Fast" goal.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_AA2CC1E2-A20D-4EEC-9E3D-7B27D5212ACD
#+BEGIN_SRC sh
set -o notify
#+END_SRC

***** No Surprises
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:A8FF6C86-EFD8-46E3-AB92-9D19ECB235A8
:END:

Provide but disable interactive debugging by default.

Instead force children to change their configuration script,
run with ~bash --debugger~ or set ~shopt -s extdebug~.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_972F36A6-F2C2-4C2A-9026-F9F7E7AAEC06
#+BEGIN_SRC sh
shopt -u extdebug
#+END_SRC

Log files are often identified as important only after accidentally clobbering
them. Make stomping visible  by first deleting them and then writing them
out again. Doing so is easy to automate and searchable.

#+BEGIN_QUOTE
Prevent output redirection using ‘>’, ‘>&’, and ‘<>’ from overwriting existing
files.
#+END_QUOTE

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_E5E5E938-D419-475F-9250-8EAEFD5E3CE6
#+BEGIN_SRC sh
set -o noclobber
#+END_SRC

Referencing an undefined variable or parameter should generate an error because
the program can not run as intended. The system should fail-fast. Only use this
in individual shell scripts; not the global configuration because doing so
prevents Bash system initialization by preventing you to define any new
variables and dying!

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_A2FA681A-D61B-4E19-B3B2-E22DEE12949B
#+BEGIN_SRC sh
# set -o nounset
#+END_SRC

Put temporary files in one place.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_F66F1637-E3CB-4D66-BC8F-DE64C8F73901
#+BEGIN_SRC sh
export TMPDIR="/tmp"
#+END_SRC

***** Performance
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:AFB6A8B2-AFB2-4850-BF4D-87040E93222C
:END:

Cache recently executed command source locations in a lookup table and search
that before searching the lookup path to find a command.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_44FDFC0D-611C-41FC-81B0-F67A01DBA87B
#+BEGIN_SRC sh
set -o hashall
shopt -s checkhash
#+END_SRC

**** Variables
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:9F0DDF78-01AB-4C68-9027-1852624E3851
:END:

***** Encoding
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:8DABD7BF-387E-4CCB-8242-AD3B3A8D0368
:END:

Use UTF-8 for everything.

Emacs will use this but will override it with settings in your init file.

Read more about how locale variables work in its man page. Only =LC_ALL= is
required if all of your settings are the same.

Set anything un-set.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_4E46C65A-9282-4D52-91CE-E1739DEB4033
#+BEGIN_SRC sh
export LANG="en_US.UTF-8"
#+END_SRC

Override everything

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_35A437FE-A052-4125-8F69-20A929F8E118
#+BEGIN_SRC sh
export LC_ALL="en_US.UTF-8"
#+END_SRC

Sor how you expect it.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_ACFFFBB0-E8E9-4439-BD83-3480AA275A2C
#+BEGIN_SRC sh
export LC_COLLATE="POSIX"
#+END_SRC

Verify encoding.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_54E6F702-5327-41A1-A266-8300363A3466
#+BEGIN_SRC sh
if [ "$(locale charmap)" == "UTF-8" ]; then
    printf "Character encoding expected to be 'UTF-8' and found it to be CORRECT.\n"
else
  printf "Character encoding expected to be 'UTF-8' and found it to be INCORRECT as $(locale charmap).\n"
fi
#+END_SRC

***** Fontconfig
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:CA259BBD-7D76-4C57-BA3F-B8E1437C773E
:END:

[[https://www.freedesktop.org/software/fontconfig/fontconfig-devel/fcconfigfilename.html][Configure Fontconfig]].

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_8256A72B-A6AF-4074-8EEC-98FFB829AB19
#+BEGIN_SRC sh
export FONTCONFIG_PATH=/opt/X11/lib/X11/fontconfig
#+END_SRC

**** Constants
:PROPERTIES:
:ID:       org_gcr_2018-11-15T23-09-36-06-00_cosmicality:80E17869-CF91-446E-B29C-ECA9D6E5D134
:END:

These are constants but I didn't ~readonly~ them or ~declare -r~ them so that they
can be used in strings.

***** Binary Prefix
:PROPERTIES:
:ID:       org_gcr_2018-11-15T23-09-36-06-00_cosmicality:9AA33A8C-5F8B-4CC7-88A1-CD968E676CA3
:END:

#+begin_quote
A [[https://en.wikipedia.org/wiki/Binary_prefix][binary prefix]] is a unit prefix for multiples of units in data processing,
data transmission, and digital information, notably the bit and the byte, to
indicate multiplication by a power of 2.

The computer industry has historically used the units kilobyte, megabyte, and
gigabyte, and the corresponding symbols KB, MB, and GB, in at least two
slightly different measurement systems. In citations of main memory (RAM)
capacity, gigabyte customarily means 1073741824 bytes. As this is a power of
1024, and 1024 is a power of two (210), this usage is referred to as a binary
measurement.

In most other contexts, the industry uses the multipliers kilo, mega, giga,
etc., in a manner consistent with their meaning in the International System of
Units (SI), namely as powers of 1000. For example, a 500 gigabyte hard disk
holds 500000000000 bytes, and a 1 Gbit/s (gigabit per second) Ethernet
connection transfers data at 1000000000 bit/s. In contrast with the binary
prefix usage, this use is described as a decimal prefix, as 1000 is a power of
10 (103).
#+end_quote

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_D3D094C2-C5EE-4250-ACB6-17CE53AAE339
#+begin_src sh
export KILO=$((1000**1))
export MEGA=$((1000**2))
export GIGA=$((1000**3))

export KIBI=$((1024**1))
export MEBI=$((1024**2))
export GIBI=$((1024**3))
#+end_src

*** Bashnoninteractivecore
:PROPERTIES:
:header-args: :noweb-ref BashNonInteractiveCore
:ID:       org_gcr_2017-05-12_mara:C8D58FA9-17C0-4474-AB1E-540F715C4970
:END:

Only use this functionality in a non-interactive session.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_481003BA-6E95-4F32-8FC4-23A919931953
#+BEGIN_SRC sh
if [ "$PS1" ]; then
    printf "Expected a non-interactive shell. 0F4DD650-97C5-492A-BCDD-8D74DBD8AAD0\n" 1>&2
    exit 1
fi
#+END_SRC

Never take input from the user interactively and disable the use of those
commands.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_DB35E7B7-3624-4FF2-9ADD-335909BEFB72
#+BEGIN_SRC sh
unset -f read select
#+END_SRC

Aliases are only for interactive users.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_F569D00F-DBAA-460F-BB01-7B4F28476B0E
#+BEGIN_SRC sh
shopt -u expand_aliases
#+END_SRC

*** BashInteractiveCore
:PROPERTIES:
:header-args: :noweb-ref BashInteractiveCore
:ID:       org_gcr_2017-05-12_mara:4825F69D-14A3-43DB-A7FE-A49C3C038F95
:END:

Only use this functionality in an interactive session.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_0B6FF317-9B60-4BFA-83F7-D63D917BBDA5
#+BEGIN_SRC sh
if [ -z "$PS1" ] && [ -z "$DISPLAY" ]; then
    printf "Expected an interactive shell. E0DEB2B6-DE8B-4B8D-B2AC-2FEA7D5B6B4F\n" 1>&2
    exit 1
fi
#+END_SRC

Use ~echo -e~ instead of ~printf~ to prevent Bash from interpreting the values as
escape sequences.

**** Options
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:ADA5B8DA-2E4D-45F5-84E9-F71F51B37195
:END:
***** Expressivity
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:D707713A-4856-48D5-A32E-FF51DFE23E39
:END:

Programatically complete command options.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_8793176F-40C6-4AA9-86DD-8E306B4821A2
#+BEGIN_SRC sh
shopt -s progcomp
#+END_SRC

Aliases are only for interactive users.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_D3791EDF-59DE-4935-B804-B81B8350B154
#+BEGIN_SRC sh
shopt -s expand_aliases
#+END_SRC

***** History
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:171CCA0F-7C83-44F5-8A67-76976D7923C4
:END:

Enable command history.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_E3DEA841-A496-48AA-8139-DA234B02E93C
#+BEGIN_SRC sh
set -o history
shopt -s histappend
#+END_SRC

Enable ~!~ substitution.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_A0331EBC-EA7D-4CA2-9290-F27A04E70186
#+BEGIN_SRC sh
set -o histexpand
#+END_SRC

Easily re-edit historical multi-line commands.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_5FE7E6C7-56CC-48E0-BF30-43E217408179
#+BEGIN_SRC sh
shopt -s cmdhist
#+END_SRC

Separate lines with newline characters

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_9CC3AF80-74BE-4E1B-87DD-D5EF3C5EB880
#+BEGIN_SRC sh
shopt -s lithist
#+END_SRC

***** Interface
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:A090CEA5-4D16-4527-865A-2DBED7424266
:END:

Use EMACS keybindings for ~Readline~ and ~read~.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_018167EF-6446-4B9C-ADAB-A961069AB738
#+BEGIN_SRC sh
set -o emacs
#+END_SRC

When the command name is a directory in the =$PWD= pass it to =cd=.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_4F328706-CBAC-4F89-A457-CA35E364FD59
#+BEGIN_SRC sh
shopt -s autocd
#+END_SRC

Refresh ~LINES~ and ~COLUMNS~ after every command.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_B4B0412D-F14E-4D7D-8BA7-9F73784F6056
#+BEGIN_SRC sh
shopt -s checkwinsize
#+END_SRC

Automatically complete directory-names and replace the original name value.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_1AE4C37C-DFFC-48B0-9B99-14CE8435AFD2
#+BEGIN_SRC sh
shopt -s complete_fullquote
#+END_SRC

Enable comments.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_73420B99-FD8E-4470-A1E8-490BB9AB62FC
#+BEGIN_SRC sh
shopt -s interactive_comments
#+END_SRC

***** Job Control
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:EEDDBEB4-0052-45DF-A0BE-88BE230308C9
:END:

Never exit a shell when there are still running or stopped jobs.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_F9A928CA-DFA3-4754-948D-351D6BBFF8DA
#+BEGIN_SRC sh
shopt -s checkjobs
#+END_SRC

Send =HUP= to all child processes when the interactive parent shell exits.

Use ~nohup~ for the opposite.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_8D6F0E61-9A42-4D76-A323-1812B75F9326
#+BEGIN_SRC sh
shopt -s huponexit
#+END_SRC

***** No Surprises
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:BF8365A6-5F55-4A16-9D0D-F4F7C7321779
:END:

Assume that the user (computer or human) provided the correct directory-name
arguments to a command and do not modify them. Auto-correction of directory
names can *at best* cause *complete disaster* for a distracted operator.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_873A00A3-B906-4F6D-B46D-19D7047F313E
#+BEGIN_SRC sh
shopt -u cdspell
#+END_SRC

For directories, too.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_F983ACF0-4E03-48AC-A84F-24418C43950D
#+BEGIN_SRC sh
shopt -u dirspell
#+END_SRC

It is too easy to accidentally leave a shell by typing Control-D. Prevent it.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_B7B60544-EBE1-4F0D-88C8-F1AA182AF39A
#+BEGIN_SRC sh
set -o ignoreeof
#+END_SRC

Never attempt to complete a command in the contents of =PATH= when nothing is
typed in.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_D3F8A409-9F7E-4F8D-BBCD-C4A90F32CEF2
#+BEGIN_SRC sh
shopt -s no_empty_cmd_completion
#+END_SRC

**** Variables
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:679E2DA0-0A15-4A85-A034-8631D8F0594A
:END:

***** History
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:1819D813-3D7D-4F5D-99ED-D49932E5A265
:END:

Exclude history of commands starting with a space. Commands entered multiple
times are important; keep their history (don't erase them).

Ignore every command that
- Starts with any number of spaces
- Starts with any number of tabs

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_265E647C-A9FA-446A-8A84-2FFEB5B9F411
#+BEGIN_SRC sh
export HISTIGNORE="[ \t]*"
#+END_SRC

Keep a rich and expansive history.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_CD8E7DFE-65C9-4139-8254-31B6EE9F2A97
#+BEGIN_SRC sh
HISTSIZE=250
HISTFILESIZE=250
SHELL_SESSION_HISTORY=-1
#+END_SRC

*Do Not* Track history by setting ~HISTTIMEFORMAT~: It breaks the resume feature in Terminal.app.

***** Interface
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:FD057DE3-4E73-402A-8D37-F0B4413F17CC
:END:

Usually you know what directory you are sitting in so only show that.

Turn it off or on for 1-3 or all directories.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_3C2800D0-7925-4D49-B877-FD1BFC6FBA55
#+BEGIN_SRC sh
PROMPT_DIRTRIM=1
alias 1dir="PROMPT_DIRTRIM=1"
alias 2dir="PROMPT_DIRTRIM=2"
alias 3dir="PROMPT_DIRTRIM=3"
alias ndir="PROMPT_DIRTRIM=0"
#+END_SRC

***** User
:PROPERTIES:
:ID:       org_gcr_2019-08-11T16-10-48-05-00_cosmicality:F23F90E4-5B92-490B-A751-51EC89EB1225
:END:

Get timezones: ~sudo systemsetup -listtimezones~

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_25DFD1E8-1C14-4CE4-B04F-A15E3925BDE8
#+begin_src sh
export NAME="Grant Rettke"
export EMAIL="grant@wisdomandwonder.com"
export ORGANIZATION="Wisdom and Wonder"
export TZ="America/Chicago"
#+end_src

** Global Shell Configuration Files
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:0D578995-CDE4-4247-9FE3-EDDBDFB6FB22
:END:

*** Non-Interactive
:PROPERTIES:
:header-args: :tangle ./.bash_global_non_interactive
:ID:       org_gcr_2017-05-12_mara:DB3A9415-85FC-46FD-BF39-F723E5235C3C
:END:

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_F9F1BC81-7520-447B-A109-BF751606EED7
#+BEGIN_SRC sh :comments no
# -*- mode: sh; -*-
#+END_SRC

Every Bash session requires the same configuration.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_634C0987-EA09-47B9-8470-749A4C554F77
#+BEGIN_SRC sh
⟪BashCore⟫
#+END_SRC

Only non-interactive sessions requires this configuration.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_7EFCBF3C-69CF-4F80-B7AD-7034E0577A90
#+BEGIN_SRC sh
⟪BashNonInteractiveCore⟫
#+END_SRC

*** Interactive
:PROPERTIES:
:header-args: :tangle ./.bash_global_interactive
:ID:       org_gcr_2017-05-12_mara:1E8A5E47-9189-40EB-A9B9-8D4835775A7A
:END:

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_F707E96F-A74C-4FA9-9149-B7DDB72B218B
#+BEGIN_SRC sh :comments no
# -*- mode: sh; -*-
#+END_SRC

Every Bash session requires the same configuration.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_BD3F4F38-92D6-4310-9276-E7DCF825E421
#+BEGIN_SRC sh
⟪BashCore⟫
#+END_SRC

Only interactive sessions requires this configuration.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_F55305F4-02E8-4610-9C08-8AD1FDD9A46B
#+BEGIN_SRC sh
⟪BashInteractiveCore⟫
#+END_SRC

** Login Shell Configuration Files
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:BCD75F93-7AD8-49D6-A5CF-EF2AC6769098
:END:

*** BashProfile
:PROPERTIES:
:header-args: :tangle ./.bash_login
:ID:       org_gcr_2017-05-12_mara:93967906-378F-4A5B-B53F-1068F93DF8BB
:END:

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_4FB15878-C40F-4D80-A73B-B0D9A1561F58
#+BEGIN_SRC sh :comments no
#!/usr/local/bin/bash
# -*- mode: sh; -*-
#+END_SRC

Execute the same configuration as every non-login interactive shell.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_4C32C1AE-EF81-4469-9B77-78D2FEF9CD52
#+BEGIN_SRC sh
if [ -f /Users/gcr/.bashrc ]; then
  source /Users/gcr/.bashrc;
fi
#+END_SRC

*** BashRc
:PROPERTIES:
:header-args: :tangle ./.bashrc
:ID:       org_gcr_2017-05-12_mara:93E59E15-9E26-4FEE-800A-4DB748AB395F
:END:
**** Header
:PROPERTIES:
:ID:       org_gcr_2019-11-25T18-49-26-06-00_gsmac:98614993-2913-437D-B755-2DD1B1878C6D
:END:

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_321C8889-A026-4FBF-B76A-EE8EF4AB7D9C
#+BEGIN_SRC sh :comments no
# -*- mode: sh; -*-
#+END_SRC

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_D5E7EF39-539B-4373-8F42-CAFFBE72C40F
#+BEGIN_SRC sh
source ~/.bash_global_interactive
#+END_SRC
**** Prompts
:PROPERTIES:
:ID:       org_gcr_2019-11-30T12-40-47-06-00_gsmac:BB7109E6-E152-47E0-AEF1-3BDC58540D57
:END:

Prompt zero is displayed after you enter a command and before the command is
executed.

Make the session easier to read.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_72CEF62C-3586-44DE-B6AA-2237D0CC34E3
#+BEGIN_SRC sh
export PS0="OK...\n\n"
#+END_SRC

Prompt one is the one that you see all the time.

Show enough to stay out of trouble.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_2347CD33-4AC1-4523-89CB-8B2B52D6A009
#+BEGIN_SRC sh
export PS1="\u@\h:\w⮞ "
#+END_SRC

Prompt two is the one that you see when you break a command into
multiple lines.

Emphasize what is happening because I usually end up here accidentally.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_09530882-ADE9-4970-AB87-8020083BC3D6
#+BEGIN_SRC sh
export PS2="(continued)⮞ "
#+END_SRC

Prompt three is the one that you see when you are presented with a menu
created using the ~select~ function.

You see it when ~select~ makes you to make a selection.

The following [[https://askubuntu.com/questions/1705/how-can-i-create-a-select-menu-in-a-shell-script][example]] demonstrates its use:

#+BEGIN_EXAMPLE
export PS3="Please enter your choice: "
options=("Option 1" "Option 2" "Option 3" "Quit")
select opt in "${options[@]}"
do
    case $opt in
        "Option 1")
            echo "you chose choice 1"
            ;;
        "Option 2")
            echo "you chose choice 2"
            ;;
        "Option 3")
            echo "you chose choice 3"
            ;;
        "Quit")
            break
            ;;
        *) echo invalid option;;
    esac
done
#+END_EXAMPLE

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_F75C4DEC-3C19-45D4-8E6B-0990ABB665AC
#+BEGIN_SRC sh
export PS3="Please make a selection: "
#+END_SRC

Prompt four is what you see when you enable debugging with ~set -x~.

I copied this from the documentation.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_C160B43F-9CDC-4C19-9DD1-EE78E7AAA86F
#+BEGIN_SRC sh
export PS4="(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]} - [${SHLVL},${BASH_SUBSHELL}, $?"
#+END_SRC

**** Body
:PROPERTIES:
:ID:       org_gcr_2019-11-25T18-49-26-06-00_gsmac:8A021170-0680-4409-93AC-7CD84CC6625E
:END:

For a graphical operating system interface.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_42A51E66-5A0C-4FCE-9788-CD8BA85A6DBC
#+BEGIN_SRC sh
export VISUAL="emacs"
#+END_SRC

For a terminal operating system interface.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_3ABFD9E6-3802-4C27-8DCB-6B4E2A2E797A
#+BEGIN_SRC sh
export EDITOR="emacs -nw"
#+END_SRC

**** Aliases
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:160278CE-DE40-44A7-9509-F17B3AD5A43A
:END:

Checksum.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_A1CD5BCA-9A8B-410C-BE5D-54C51BE32338
#+begin_src sh
alias sha256summake="shasum --algorithm 256 --portable"
alias sha256sumcheck="shasum --algorithm 256 --warn --check"
alias sha512summake="shasum --algorithm 512 --portable"
alias sha512sumcheck="shasum --algorithm 512 --warn --check"
#+end_src

Good defaults.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_D63C2874-1AA5-45A4-8AF5-7D22086D06D0
#+BEGIN_src sh
alias mkdir="mkdir -pv"
alias mount="mount | column -t"
alias df="df -h"
alias du="du -ach"
alias idk="identify *.*"
alias kk="cd .."
#+END_SRC

Shortcuts.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_F5D98D7B-1A37-4DAB-A9FE-AB8A7423BC0A
#+BEGIN_src sh
alias h="history"
alias j="jobs -l"
#+END_SRC

Get download speed [fn:167e637e4fea0629:https://www.gulshansingh.com/posts/useful-bash-aliases/].

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_A5763981-9448-4B4F-A394-88AA19259B64
#+BEGIN_src sh
alias speedtest="wget -O /dev/null http://speedtest.wdc01.softlayer.com/downloads/test500.zip"
#+END_SRC

I accidentally type =cd= instead of =cd ..=. I want to return to my original
working directory and I'm irritated because I'm lazy and I don't want to type
=cd $OLDPWD=. Don't get rid of =cd= though because I do use it and it is faster
than =cd ~/=.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_4AA2E64E-7074-4F68-BC50-E3DE1158A50C
#+BEGIN_src sh
alias bk="cd $OLDPWD"
#+END_SRC

Exit.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_B8745F35-A481-4EA8-BF7A-72C484C3B0E1
#+begin_src
alias e=exit
#+end_src

Always use ~Bash~ *never* use the default shell.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_A5F403E4-38F9-4F02-A6C8-3253F00D3935
#+BEGIN_src sh
alias sh="/usr/local/bin/bash"
#+END_SRC

Listing by modification forward and backward.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_23D19C9E-1B43-4C25-9BFA-48FE1EA04A90
#+BEGIN_src sh
alias lsmd="ls -haltr"
alias lsmdm="ls -halt"
#+END_SRC

Toggle grayscale.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_F1D33BB7-E1D7-4D87-83BC-F2D6EE2CB318
#+begin_src sh
alias togglegrayscale="osascript /Users/gcr/util/sspadtogglegrayscale.scpt"
#+end_src

Invert colors.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_B5C1EDD5-6C74-49F7-BBE5-BC3E24CD7B96
#+begin_src sh
alias invertcolors="osascript /Users/gcr/util/sspadtogglecolors.scpt"
#+end_src

Start screensaver.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_65FC6156-897D-4227-8011-B5AD13E59471
#+begin_src sh
alias sav="osascript /Users/gcr/util/Start-Screensaver.scpt"
#+end_src

File Management.

youtube-dl

- [[https://github.com/ytdl-org/youtube-dl/blob/master/README.md#format-selection-examples][Via]]
- "Download best mp4 format available or any other best if no mp4 available"

#+NAME: org_gcr_2020-04-30T13-51-04-05-00_gsmac_710AE065-6C2C-464F-97D2-24AF216AA26F
#+BEGIN_SRC sh
alias ytdbst="youtube-dl -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best'"
#+END_SRC

**** Functions
:PROPERTIES:
:ID:       org_gcr_2017-10-07_mara:8EA38DF8-28EE-4D10-B1CF-0C5B24BB2F70
:END:

Elpa.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_A0DFBB0D-D86E-44C4-B374-6BA3E9B50060
#+begin_src
function emackup() {
  cd ~/.emacs.d
  git add .
  git commit -m "Automated versioning"
  git push
  cd
}
#+end_src

Get the NTH line of a FILE via https://stackoverflow.com/questions/6022384/bash-tool-to-get-nth-line-from-a-file

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_DD43A5A2-3FF1-4981-95E3-C40F775110AD
#+BEGIN_src sh
function nthlineof {
  if (( "$#" < 2 )); then
      printf "Print the NTH line of FILE\n"
      printf "Usage: ${FUNCNAME[0]} NTH FILE\n"
      return 1
  fi
  tail -n+"$1" "$2" | head -n1
}
#+END_SRC

Wait for Alpha seconds before saying Beta.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_7EDCDC57-8D76-47EA-BF5B-61EF5D4F4826
#+begin_src sh
function wtndsyndntfy() {
  if (($# <= 2)); then
      printf "Usage: ${FUNCNAME[0]} minutes words...\n"
      return 1
  else
    local minutes="$1"
    local seconds=$((minutes * 60))
    local words="${@:2}"
    local message="$(echo \"${words[*]}\")"
    printf "Waiting for minute(s): %s\n" $minutes
    printf "Before saying and notifying: $message\n"
    printf "Started waiting on: $(date)\n"
    printf "(Type Control+C to quit)\n"
    trap 'echo "Saying it immediately."' INT
    sleep "$seconds"
    say "$message"
    terminal-notifier -message "$message"
    return 0
  fi
}
#+end_src

Tmux

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_8E51A0F2-11C7-42FA-BC4F-5AE9A4FC0199
#+begin_src sh
function sshtmuxattach {
  if [[ $# -ne 2 || -z "$1" || -z "$2" ]] ; then
      printf "Usage: ${FUNCNAME[0]} <Host> <Session>\n"
      printf "SSH into HOST and attach to Tmux SESSION.\n"
      return 1
  fi
  local host=$1;
  local session=$2
  ssh "$host" -t tmux attach -t "$session"
}
#+end_src

Random element of array via [[https://unix.stackexchange.com/a/269963/310466][Jeff Schaller]].

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_5C9BF5DB-DCF6-4BAD-874F-C88C4AFA87E7
#+begin_src sh
function ref { # Random Element From
  declare -a array=("$@")
  r=$((RANDOM % ${#array[@]}))
  printf "%s\n" "${array[$r]}"
}
#+end_src

Announce things.
#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_576F9B35-6C9B-420A-83AB-7BF1414F2FD2
#+begin_src sh
function cry {
  if (("$#" >= 2)); then
    figlet -f "$1" "${@:2}"
  elif [ "$#" -eq 1 ]; then
    figlet "$1"
  else
    printf "Announce message to user maybe using a different font.\n"
    printf "Usage: ${FUNCNAME[0]} \"MESSAGES...\" | ${FUNCNAME[0]} FONT \"MESSAGES...\"\n"
    printf "For example ${FUNCNAME[0]} \"Be Here Now\" or ${FUNCNAME[0]} starwars \"May The Force Be With You\"\n"
  fi
}

function cryrnd {
  if (("$#" >= 1)); then
    local font=`ls -b "$(brew --prefix figlet)/share/figlet/fonts"/*.flf | gshuf -n1`
    figlet -f "$font" "$@"
  else
    printf "Announce message to user in a random font.\n"
    printf "Usage: ${FUNCNAME[0]} \"MESSAGES..\".\n"
    printf "For example ${FUNCNAME[0]} FONT \"Buffalo buffalo Buffalo\"\n"
  fi
}
#+end_src

Make.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_18F5C6DD-63FD-4FCD-8CDF-43E0DE7FC782
#+begin_src sh :tangle no
function mk {
  make "$@"
}
#+end_src

Create file with random text.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_FD0E042D-3752-4211-9E87-428358A966D6
#+begin_src sh
function rndfile {
  if [[ $# -ne 2 || -z "$1" || -z "$2" ]] ; then
    printf "Usage: ${FUNCNAME[0]} <FILENAME> <NBYTES>\n"
    printf "Pipe NBYTES from /dev/urandom into FILENAME.\n"
    return 1
  fi
  local filename=$1;
  local nbytes=$2
  gbase64 /dev/urandom | ghead --bytes=$nbytes > $filename
}
#+end_src

macOS File Locking.

#+name: org_gcr_2017-10-07_mara:8EA38DF8-28EE-4D10-B1CF-0C5B24BB2F70
#+BEGIN_SRC sh
function lk {
  if [[ $# -ne 1 || -z "$1" ]] ; then
    printf "Usage: %s <FILEORDIRECTORY>\n" "${FUNCNAME[0]}"
    printf "In Finder: Lock FILEORDIRECTORY.\n"
    return 1
  fi
  printf "Locking: %s\n" "$1"
  chflags uchg "$1"
}

function rlk {
  if [[ $# -ne 1 || -z "$1" ]] ; then
    printf "Usage: %s <DIRECTORY>\n" "${FUNCNAME[0]}"
    printf "In Finder: Recursively lock DIRECTORY and its contents.\n"
    return 1
  fi
  printf "Recursively Locking: %s\n" "$1"
  chflags -R uchg "$1"
}

function ulk {
  if [[ $# -ne 1 || -z "$1" ]] ; then
    printf "Usage: %s <FILEORDIRECTORY>\n" "${FUNCNAME[0]}"
    printf "In Finder: Unlock FILEORDIRECTORY.\n"
    return 1
  fi
  printf "Unlocking: %s\n" "$1"
  chflags nouchg "$1"
}

function rulk {
  if [[ $# -ne 1 || -z "$1" ]] ; then
    printf "Usage: %s <FILEORDIRECTORY>\n" "${FUNCNAME[0]}"
    printf "In Finder: Recursively unlock DIRECTORY and its contents.\n"
    return 1
  fi
  printf "Recursively unlocking: %s\n" "$1"
  chflags -R nouchg "$1"
}
#+END_SRC

ffmpeg stuff.

#+NAME: org_gcr_2020-05-25T18-54-59-05-00_gsmac_C10FF5EA-C5EC-4D81-AA6F-C38FF1042931
#+BEGIN_SRC sh
function aac2mp3 {
  if [[ $# -ne 2 || -z "$1" || -z "$2" ]] ; then
    printf "Usage: ${FUNCNAME[0]} <Source> <Destination>\n"
    printf "FFmpeg converts SOURCE AAC file to DESTINATION MP3 file.\n"
    return 1
  elif [[ ! -f "$1" ]] ; then
    printf "Usage: ${FUNCNAME[0]} <Source> <Destination>\n"
    printf "I can't find the SOURCE AAC file '%s' so I'm bailing.\n" "$1"
    return 1
  elif [[ -f "$2" ]] ; then
    printf "Usage: ${FUNCNAME[0]} <Source> <Destination>\n"
    printf "The DESTINATION file '%s' already exists so I'm bailing.\n" "$2"
    printf "Delete '%s' first then try this command again.\n" "$2"
    return 1
  fi
  ffmpeg -i "$1" -vn -ar 44100 -ac 2 -b:a 192k "$2"
}

function mp42m4a {
  if [[ $# -ne 2 || -z "$1" || -z "$2" ]] ; then
    printf "Copy MP4 SOURCE's unencoded audio stream into the DESTINATION M4A file.\n"
    printf "Run 'ffprobe SOURCE' to learn more about its contents.\n"
    return 1
  elif [[ ! -f "$1" ]] ; then
    printf "Usage: ${FUNCNAME[0]} <Source> <Destination>\n"
    printf "I can't find the SOURCE file '%s' so I'm bailing.\n" "$1"
    return 1
  elif [[ -f "$2" ]] ; then
    printf "Usage: ${FUNCNAME[0]} <Source> <Destination>\n"
    printf "The DESTINATION file '%s' already exists so I'm bailing.\n" "$2"
    printf "Delete '%s' first then try this command again.\n" "$2"
    return 1
  fi
  ffmpeg -i "$1" -vn -acodec copy "$2"
}
#+END_SRC

***** Various
:PROPERTIES:
:ID:       org_gcr_2020-07-27T14-15-12-05-00_gsmac:DA267580-1DB0-440E-87AA-DD2C995BBFFF
:END:

Were Aliases.

#+NAME: org_gcr_2020-07-27T16-04-55-05-00_gsmac_CACEE2A8-499C-4466-881B-DF378C6DF869
#+BEGIN_SRC sh
function randomword {
  gshuf -n1 /Users/gcr/src/english-words/words.txt
}
#+END_SRC

Run a command multiple times.

#+NAME: org_gcr_2020-07-27T14-15-12-05-00_gsmac_297E8D9A-9719-4E08-B3EC-1CD1B2EB130E
#+BEGIN_SRC sh
function runn {
  if [[ -z "$1" || -z "$2" ]] ; then
    printf "Usage: %s <REPETITIONS> <COMMAND> <ARGUMENTS...>\n" ".sh${FUNCNAME[0]}"
    printf "Repeatedly run COMMAND with ARGUMENTS, REPETITONS times.\n"
    return 1
  fi
  local repetitions="$1"
  local command="$2"
  shift
  shift
  local argarray=("$@")
  local argstring="${argarray[*]}"
  printf "Attempting to run %s repetitions of the command \"%s\" with arguments \"%s\":\n" "$repetitions" "$command" "$argstring"
  for (( repetition=0; repetition<"$repetitions"; repetition++ )); do
    if [ -z "$argstring" ]; then
      "$command"
    else
      "$command" "$argstring"
    fi
  done
}
#+END_SRC

***** Graphviz
:PROPERTIES:
:ID:       org_gcr_2020-06-26T22-20-01-05-00_gsmac:05E96E54-83A8-4711-9FED-4C47BEA5DE1B
:END:

#+NAME: org_gcr_2020-06-26T22-20-01-05-00_gsmac_6C6A92E9-80D4-4688-9F10-DB9650608B68
#+BEGIN_SRC sh
function dot2pdf {
  if [[ $# -lt 2 || -z "$1" || -z "$2" ]] ; then
    printf "Usage: %s <IN> <OUT>\n" "${FUNCNAME[0]}"
    printf "Convert a Graphviz DOT INput file to PDF OUTput file.\n"
    return 1
  fi
  local inputfile=$1
  local outputfile=$2
  printf "Attempting to convert \"%s\" to \"%s\".\n\n" "$inputfile" "$outputfile"
  dot -Tpdf "$inputfile" -o "$outputfile"
  local status="$?"
  if [ "$status" -eq 0 ]; then
    printf "Conversion appears to have succeeded.\n\n"
    printf "Please verify \"%s\" is what you expected.\n" "$outputfile"
  else
    printf "Conversion appears to have failed.\n"
    printf "Please review function usage, error messages, and Pandoc documentation then try again.\n"
  fi
  return "$status"
}
#+END_SRC
***** Pandoc
:PROPERTIES:
:ID:       org_gcr_2020-06-16T19-11-50-05-00_gsmac:18688A3B-56D9-46EF-B349-F65826114A36
:END:

#+NAME: org_gcr_2020-06-16T19-11-50-05-00_gsmac_39219C20-CBC5-4675-84E4-15343B1334CF
#+BEGIN_SRC sh
function org2word {
  if [[ $# -lt 2 || -z "$1" || -z "$2" ]] ; then
    printf "Usage: %s <IN> <OUT>\n" "${FUNCNAME[0]}"
    printf "Convert an Org mode file IN to MS Word file OUT using Pandoc.\n"
    return 1
  fi
  local inputfile=$1
  local outputfile=$2
  printf "Attempting to convert \"%s\" to \"%s\".\n\n" "$inputfile" "$outputfile"
  pandoc \
    --standalone \
    --reference-doc="/Users/gcr/src/pandoc-data-dir/custom-reference.docx" \
    --fail-if-warnings \
    --from=org --to=docx \
    --table-of-contents \
    "$inputfile" --output="$outputfile"
  local status="$?"
  if [ "$status" -eq 0 ]; then
    printf "Conversion appears to have succeeded.\n\n"
    printf "Please verify \"%s\" is what you expected.\n" "$outputfile"
  else
    printf "Conversion appears to have failed.\n"
    printf "Please review function usage, error messages, and Pandoc documentation then try again.\n"
  fi
  return "$status"
}
#+END_SRC

***** ls - list directory contents
:PROPERTIES:
:ID:       org_gcr_2018-09-07T21-25-20-05-00_globigerina:E21383F5-4229-4C1C-B808-0858E6A980D4
:END:
:LOGBOOK:
- State "TODO"       from              [2019-10-31 Thu 23:27]
:END:
July 2018 -- GNU coreutils 8.30

ls - list directory contents

Define reusable configuration parameters that seem the most useful.

do not list implied . and ..

#+NAME: ls-hide-dotdot-dirs
#+begin_src sh :comments no :tangle no
--almost-all
#+end_src

with -l, print the author of each file

#+NAME: ls-show-file-author
#+begin_src sh :comments no :tangle no
--author
#+end_src

list entries by columns

#+NAME: ls-list-in-columns
#+begin_src sh :comments no :tangle no
-C
#+end_src

colorize the output

#+NAME: ls-colorize-output
#+begin_src sh :comments no :tangle no
--color=always
#+END_SRC

group directories before files;

can be augmented  with a --sort option, but  any use of
--sort=\,none\/ (-U) disables grouping

#+NAME: ls-list-dirs-first
#+begin_src sh :comments no :tangle no
--group-directories-first
#+end_src

print sizes like 1K 234M 2G etc.
but use the SI format, powers of 1000 not 1024

#+NAME: ls-file-size-units-policy
#+begin_src sh :comments no :tangle no
--si
#+end_src

append indicator  with style WORD to  entry names: none
(default),   slash   (-p),   file-type   (--file-type),
classify (-F)

#+NAME: ls-show-file-type-indicator-all
#+begin_src sh :comments no :tangle no
--indicator-style=classify
#+end_src

use a long listing format

#+NAME: ls-use-long-lines
#+begin_src sh :comments no :tangle no
-l
#+end_src

enclose entry names in double quotes

#+NAME: ls-double-quote-entry-names
#+begin_src sh :comments no :tangle no
--quote-name
#+end_src

use  quoting  style  WORD  for  entry  names:  literal,
locale,     shell,      shell-always,     shell-escape,
shell-escape-always, c, escape (overrides QUOTING_STYLE
environment variable)

#+NAME: ls-quoting-style
#+begin_src sh :comments no :tangle no
--quoting-style=c
#+end_src

time/date format with -l; see TIME_STYLE below

#+NAME: ls-timestamp-format
#+begin_src sh :comments no :tangle no
--time-style=long-iso
#+end_src

Accept additional arguments to function
~"$@"~ expands to separate words: ~"$1" "$2" ...~
(see [[https://unix.stackexchange.com/questions/41571/what-is-the-difference-between-and][here]])

#+NAME: ls-take-additional-arguments
#+begin_src sh :comments no :tangle no
"$@"
#+end_src

****** Simple: l
:PROPERTIES:
:ID:       org_gcr_2020-06-12T19-06-29-05-00_gsmac:D4CF3AE5-C126-48E4-AF5D-361BA843181F
:END:

#+NAME: org_gcr_2020-06-12T19-06-29-05-00_gsmac_45C77882-9771-4B9F-9A14-599A5F82EDA2
#+BEGIN_SRC sh :comments no
function l {
  gls \
    ⟪ls-colorize-output⟫ \
    ⟪ls-take-additional-arguments⟫
}
#+END_SRC

#+RESULTS: org_gcr_2020-06-12T19-06-29-05-00_gsmac_45C77882-9771-4B9F-9A14-599A5F82EDA2
#+BEGIN_EXAMPLE
#+END_EXAMPLE

****** Rich: ~ll~
:PROPERTIES:
:ID:       org_gcr_2020-05-26T16-50-32-05-00_gsmac:7FD233EC-20D7-4A2F-9185-77FDD1A2918C
:END:

Display as much information as possible in the most user friendly way possible. Name it is clearly going to display more information.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_9199861D-C57A-4D84-A700-A5EDF590A151
#+begin_src sh :comments no
function ll {
  gls \
      ⟪ls-hide-dotdot-dirs⟫ \
      ⟪ls-show-file-author⟫ \
      ⟪ls-list-in-columns⟫ \
      ⟪ls-colorize-output⟫ \
      ⟪ls-list-dirs-first⟫ \
      ⟪ls-file-size-units-policy⟫ \
      ⟪ls-show-file-type-indicator-all⟫ \
      ⟪ls-use-long-lines⟫ \
      ⟪ls-double-quote-entry-names⟫ \
      ⟪ls-quoting-style⟫ \
      ⟪ls-timestamp-format⟫ \
      ⟪ls-take-additional-arguments⟫
      }
#+end_src

**** Applications
:PROPERTIES:
:ID:       org_gcr_2019-11-25T18-49-26-06-00_gsmac:4A2D731B-B043-4662-9E58-032418959E39
:END:
***** ccrypt
:PROPERTIES:
:ID:       org_gcr_2019-11-25T18-49-26-06-00_gsmac:B718FE1D-4D3D-47E3-B062-F1FDA900A82D
:END:

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_E7F8D5EE-7E00-4895-A260-21E8A3360C34
#+BEGIN_SRC sh
export CCRYPT="/usr/local/Cellar/ccrypt/1.11/"
#+END_SRC

***** TeX
:PROPERTIES:
:ID:       org_gcr_2019-11-25T18-49-26-06-00_gsmac:0D346D38-1207-48C3-99AE-0AC668DF130B
:END:

TeX

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_1FC17A94-BCA1-4DE2-AF9A-DE7597E73084
#+BEGIN_SRC sh
export MACTEX_BIN="/usr/local/texlive/2019/bin/x86_64-darwin/"
export TEXMFHOME="/Users/gcr/src/texmf"
export PATH="$MACTEX_BIN:$PATH"
#+END_SRC

#+NAME: org_gcr_2020-07-27T14-15-12-05-00_gsmac_7180DE37-3BD7-4842-819C-87D93DE0B06D
#+BEGIN_SRC sh
alias texshop="open /Applications/TeX/TeXShop.app/"
#+END_SRC
***** Git
:PROPERTIES:
:ID:       org_gcr_2019-11-25T18-49-26-06-00_gsmac:F467F415-1A7A-451B-99D7-1DCE1804BBA9
:END:

Git.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_121CCF66-A7DD-479D-AFCE-658143CCDDC4
#+BEGIN_SRC sh
alias g="git"
alias gitunpull="git reset --keep HEAD@{1}"
alias gituncommit="git reset --mixed HEAD^"
alias gitdiscard="git checkout -- ."
alias gitforcepush="git push origin +master"
alias gpom="git push origin master"
alias gss="git status"
alias gpl="git pull"
alias gpdrd="git fetch && git difftool origin/master"
alias gpdrsf="git fetch && git diff --stat origin/master"
alias gpdrsd="git fetch && git diff --dirstat origin/master"
alias ggss="~/git/github/recursive-git-status-bash/recursive-git-status.sh"
alias gitshowtags='git log --tags --simplify-by-decoration --pretty="format:%ai %d"'
alias magit="emacs --no-window-system --no-init-file --load \
  ~/src/help/.org-mode-contribute.emacs.el --eval '(progn (magit-status) (delete-other-windows))'"
alias gitshowreleases="git tag -l"
alias gitddiff="git diff --name-status"
alias gitlog="git log --graph --oneline --decorate"
alias gj="git difftool --cached"
alias gitlogone='git log --follow --full-history --reverse --date=short --format="%ad %s %b"'
alias gitlistallcommitters="git shortlog -s -n --all"
#+END_SRC

Git usability.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_89EDF172-801F-4804-AE2C-05AA7B4BC4E9
#+begin_src sh
function gitgreplog {
  if [[ $# -eq 0 || -z "$1" ]] ; then
    printf "Search Git commit message history for TEXT case-insensitively.\n"
    printf "Usage: ${FUNCNAME[0]} \"<required search string(s)>\" <optional additional parameters>\n"
    printf "For example add '--name-status' to include the changed-file-status before switching to 'git log #' or 'git diff #' to dig deeper."
    return 1
  fi
  local text=$1
  shift
  local cmd="git log --oneline --regexp-ignore-case --grep='$text' $@"
  printf "%s\n" "$cmd"
  eval "$cmd"
}
function gitgrepchange {
  if [[ $# -eq 0 || -z "$1" ]] ; then
    printf "Search Git commit change history for TEXT case-insensitively.\n"
    printf "Usage: ${FUNCNAME[0]} \"<required search string(s)>\" <optional additional parameters>\n"
    printf "For example add '--oneline' for a succinct report or '--name-status' to include the changed-file-status before switching to 'git log #' or 'git diff #' to dig deeper."
    return 1
  fi
  local text=$1
  shift
  local cmd="git log --pickaxe-all --pickaxe-regex -S'$text' $@"
  printf "%s\n" "$cmd"
  eval "$cmd"
}

function gitauthorhistory {
  if [[ $# -eq 0 || -z "$1" ]] ; then
    printf "Usage: ${FUNCNAME[0]} AUTHOR.\n"
    printf "Show commit log for AUTHOR name.\n"
    return 1
  fi
  local name=$1
  git log --author="$name"
}
#+end_src

bash-git-prompt.

#+name: org_gcr_2019-11-25T18-49-26-06-00_gsmac:F467F415-1A7A-451B-99D7-1DCE1804BBA9
#+BEGIN_SRC sh
export GIT_PROMPT_THEME="Single_line_Dark"

if [ -f "/usr/local/opt/bash-git-prompt/share/gitprompt.sh" ]; then
  __GIT_PROMPT_DIR="/usr/local/opt/bash-git-prompt/share"
  source "/usr/local/opt/bash-git-prompt/share/gitprompt.sh"
fi
#+END_SRC

***** Emacs
:PROPERTIES:
:ID:       org_gcr_2019-11-25T18-49-26-06-00_gsmac:D05FA841-34B3-459F-9C14-283520F1FF1C
:END:

Add Emacs's info.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_F75AEC7A-88E0-4D11-B950-740FD568F659
#+BEGIN_SRC sh
export INFOPATH="/Applications/Emacs.app/Contents/Resources/info:$INFOPATH"
#+END_SRC

Enable Bash to run under Emacs in Terminal.app.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_C617F66A-B15C-4E1B-B113-C22C53DC9A8C
#+begin_src sh
if [ -z "$(type -t update_terminal_cwd)" ] || [ "$(type -t update_terminal_cwd)" != "function" ]; then
  update_terminal_cwd() {
    true
  }
fi
#+end_src

Lolsmacs.

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_B22F92F4-FDD8-402B-A801-4BFBE877E830
#+BEGIN_src sh
source ~/src/myamacs/amacs
#+END_SRC

***** Java
:PROPERTIES:
:ID:       org_gcr_2019-11-25T19-34-14-06-00_gsmac:123EC3E3-5C48-4C60-83E9-718B7C3E9103
:END:

#+NAME: org_gcr_2019-11-25T19-34-14-06-00_gsmac:1FB57621-9C0C-41BC-84C2-B3DFE3F5C213
#+BEGIN_SRC sh
export JAVA_HOME="/Library/Java/JavaVirtualMachines/openjdk-13.0.1.jdk/Contents/Home/"
export PATH="$JAVA_HOME:$PATH"
#+END_SRC

***** Homebrew
:PROPERTIES:
:ID:       org_gcr_2019-11-25T19-34-14-06-00_gsmac:28F19342-F546-43CD-92CA-3CB37FCD6070
:END:

#+name: org_gcr_2019-11-25T19-34-14-06-00_gsmac:98474D2E-17D6-48BC-8C45-0EA8F2F46295
#+BEGIN_SRC sh
export HOMEBREW_NO_EMOJI=1
#+END_SRC

***** Python
:PROPERTIES:
:ID:       org_gcr_2019-11-25T21-24-14-06-00_gsmac:60819DEB-537D-428E-9734-796C04C516C3
:END:

#+name: org_gcr_2019-11-25T21-24-14-06-00_gsmac:112F412F-F670-4BD6-A41C-CB22C3CE6C83
#+BEGIN_SRC sh
export PATH="/usr/local/opt/python/libexec/bin:$PATH"
#+END_SRC

***** ag - The Silver Searcher
:PROPERTIES:
:ID:       org_gcr_2019-11-29T00-19-24-06-00_gsmac:199C774B-644B-4EB9-90BE-A6CB15465F16
:END:

#+name: org_gcr_2019-11-29T00-19-24-06-00_gsmac:199C774B-644B-4EB9-90BE-A6CB15465F16
#+BEGIN_SRC sh
[[ -r "/usr/local/etc/bash_completion.d/ag.bashcomp.sh" ]] && . "/usr/local/etc/bash_completion.d/ag.bashcomp.sh"
#+END_SRC

***** pandoc
:PROPERTIES:
:ID:       org_gcr_2019-11-29T00-19-24-06-00_gsmac:1B0ECD3D-7C32-42DC-8F34-94006D913D0D
:END:

#+name: org_gcr_2019-11-29T00-19-24-06-00_gsmac:1B0ECD3D-7C32-42DC-8F34-94006D913D0D
#+BEGIN_SRC sh
[[ -r "/usr/local/etc/bash_completion.d/pandoc" ]] && . "/usr/local/etc/bash_completion.d/pandoc"
#+END_SRC

***** Ruby
:PROPERTIES:
:ID:       org_gcr_2019-11-29T00-19-24-06-00_gsmac:373B6D88-CD1B-4BBA-8E4B-06C3DC7EE589
:END:

#+name: org_gcr_2019-11-29T00-19-24-06-00_gsmac:373B6D88-CD1B-4BBA-8E4B-06C3DC7EE589
#+BEGIN_SRC sh
export PATH="/usr/local/opt/ruby/bin:$PATH"
#+END_SRC

***** LanguageTool
:PROPERTIES:
:ID:       org_gcr_2019-11-29T00-33-23-06-00_gsmac:BB71CF46-39FE-40D8-8718-30D147492C25
:END:

#+name: org_gcr_2019-11-29T00-33-23-06-00_gsmac:BB71CF46-39FE-40D8-8718-30D147492C25
#+BEGIN_SRC sh
export LANGTOOL="/usr/local/Cellar/languagetool/4.7/libexec/languagetool-commandline.jar"
#+END_SRC

***** nvm
:PROPERTIES:
:ID:       org_gcr_2019-11-30T17-22-54-06-00_gsmac:89317BC7-83D8-4DFB-A09B-4A66E0AE894A
:END:

#+name: org_gcr_2019-11-30T17-22-54-06-00_gsmac:89317BC7-83D8-4DFB-A09B-4A66E0AE894A
#+BEGIN_SRC sh
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
#+END_SRC

***** textlint
:PROPERTIES:
:ID:       org_gcr_2019-11-30T17-22-54-06-00_gsmac:B214C66E-7A43-4339-9974-BE7AED3B28E0
:END:

#+name: org_gcr_2019-11-30T17-22-54-06-00_gsmac:B214C66E-7A43-4339-9974-BE7AED3B28E0
#+BEGIN_SRC sh
export PATH="/Users/gcr/opt/textlintbin/node_modules/.bin:$PATH"
#+END_SRC

**** Footer
:PROPERTIES:
:ID:       org_gcr_2019-11-25T18-49-26-06-00_gsmac:82AF307A-CE58-4E51-98D7-DFC0549CAC76
:END:

Last thing to do is prioritize the path

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_BC48EB6B-F2BA-4C08-B431-07A3C5D3EF1F
#+BEGIN_SRC sh
export PATH="/usr/local/bin:/Users/gcr/bin:$PATH"
#+END_SRC

*** BashLogout
:PROPERTIES:
:header-args: :tangle ./.bash_logout
:ID:       org_gcr_2017-05-12_mara:04FEFF46-AAC6-4AB8-9876-199B271DA565
:END:

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_E467EC86-F272-47CD-B9F9-7655B3ACB0AF
#+BEGIN_src sh :comments no
#!/usr/local/bin/bash
# -*- mode: sh; -*-
#+END_SRC

#+NAME: org_gcr_2019-11-01T00-47-07-05-00_host1.org_EE58713E-028B-43CB-875A-6C3BBB6F28EA
#+BEGIN_src sh
printf "Logging out of Bash.\n"
#+END_SRC
